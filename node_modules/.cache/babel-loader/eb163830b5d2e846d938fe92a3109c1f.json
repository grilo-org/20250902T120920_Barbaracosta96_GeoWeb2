{"ast":null,"code":"import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\nvar PDFOperator = /** @class */function () {\n  function PDFOperator(name, args) {\n    this.name = name;\n    this.args = args || [];\n  }\n  PDFOperator.prototype.clone = function (context) {\n    var args = new Array(this.args.length);\n    for (var idx = 0, len = args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n    }\n    return PDFOperator.of(this.name, args);\n  };\n  PDFOperator.prototype.toString = function () {\n    var value = '';\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n    value += this.name;\n    return value;\n  };\n  PDFOperator.prototype.sizeInBytes = function () {\n    var size = 0;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n    }\n    size += this.name.length;\n    return size;\n  };\n  PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      if (arg instanceof PDFObject) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += copyStringIntoBuffer(arg, buffer, offset);\n      }\n      buffer[offset++] = CharCodes.Space;\n    }\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\n    return offset - initialOffset;\n  };\n  PDFOperator.of = function (name, args) {\n    return new PDFOperator(name, args);\n  };\n  return PDFOperator;\n}();\nexport default PDFOperator;","map":{"version":3,"mappings":"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","names":["PDFObject","CharCodes","copyStringIntoBuffer","name","args","PDFOperator","context","Array","length","idx","len","arg","clone","of","value","String","size","sizeInBytes","buffer","offset","initialOffset","copyBytesInto","Space"],"sourceRoot":"","sources":["../../../src/core/operators/PDFOperator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}