{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PNG } from \"../../utils/png\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\n */\nvar PngEmbedder = /** @class */function () {\n  function PngEmbedder(png) {\n    this.image = png;\n    this.bitsPerComponent = png.bitsPerComponent;\n    this.width = png.width;\n    this.height = png.height;\n    this.colorSpace = 'DeviceRGB';\n  }\n  PngEmbedder.for = function (imageData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var png;\n      return __generator(this, function (_a) {\n        png = PNG.load(imageData);\n        return [2 /*return*/, new PngEmbedder(png)];\n      });\n    });\n  };\n  PngEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var SMask, xObject;\n      return __generator(this, function (_a) {\n        SMask = this.embedAlphaChannel(context);\n        xObject = context.flateStream(this.image.rgbChannel, {\n          Type: 'XObject',\n          Subtype: 'Image',\n          BitsPerComponent: this.image.bitsPerComponent,\n          Width: this.image.width,\n          Height: this.image.height,\n          ColorSpace: this.colorSpace,\n          SMask: SMask\n        });\n        if (ref) {\n          context.assign(ref, xObject);\n          return [2 /*return*/, ref];\n        } else {\n          return [2 /*return*/, context.register(xObject)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  PngEmbedder.prototype.embedAlphaChannel = function (context) {\n    if (!this.image.alphaChannel) return undefined;\n    var xObject = context.flateStream(this.image.alphaChannel, {\n      Type: 'XObject',\n      Subtype: 'Image',\n      Height: this.image.height,\n      Width: this.image.width,\n      BitsPerComponent: this.image.bitsPerComponent,\n      ColorSpace: 'DeviceGray',\n      Decode: [0, 1]\n    });\n    return context.register(xObject);\n  };\n  return PngEmbedder;\n}();\nexport default PngEmbedder;","map":{"version":3,"mappings":";AAEA,SAASA,GAAG,QAAE;AAEd;;;;;AAKA;EAaE,qBAAoBC,GAAQ;IAC1B,IAAI,CAACC,KAAK,GAAGD,GAAG;IAChB,IAAI,CAACE,gBAAgB,GAAGF,GAAG,CAACE,gBAAgB;IAC5C,IAAI,CAACC,KAAK,GAAGH,GAAG,CAACG,KAAK;IACtB,IAAI,CAACC,MAAM,GAAGJ,GAAG,CAACI,MAAM;IACxB,IAAI,CAACC,UAAU,GAAG,WAAW;EAC/B;EAlBaC,eAAG,GAAhB,UAAiBC,SAAqB;;;;QAC9BP,GAAG,GAAGD,GAAG,CAACS,IAAI,CAACD,SAAS,CAAC;QAC/B,sBAAO,IAAID,WAAW,CAACN,GAAG,CAAC;;;GAC5B;EAiBKM,sCAAgB,GAAtB,UAAuBG,OAAmB,EAAEC,GAAY;;;;QAChDC,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAACH,OAAO,CAAC;QAEvCI,OAAO,GAAGJ,OAAO,CAACK,WAAW,CAAC,IAAI,CAACb,KAAK,CAACc,UAAU,EAAE;UACzDC,IAAI,EAAE,SAAS;UACfC,OAAO,EAAE,OAAO;UAChBC,gBAAgB,EAAE,IAAI,CAACjB,KAAK,CAACC,gBAAgB;UAC7CiB,KAAK,EAAE,IAAI,CAAClB,KAAK,CAACE,KAAK;UACvBiB,MAAM,EAAE,IAAI,CAACnB,KAAK,CAACG,MAAM;UACzBiB,UAAU,EAAE,IAAI,CAAChB,UAAU;UAC3BM,KAAK;SACN,CAAC;QAEF,IAAID,GAAG,EAAE;UACPD,OAAO,CAACa,MAAM,CAACZ,GAAG,EAAEG,OAAO,CAAC;UAC5B,sBAAOH,GAAG;SACX,MAAM;UACL,sBAAOD,OAAO,CAACc,QAAQ,CAACV,OAAO,CAAC;;;;;GAEnC;;EAEOP,uCAAiB,GAAzB,UAA0BG,OAAmB;IAC3C,IAAI,CAAC,IAAI,CAACR,KAAK,CAACuB,YAAY,EAAE,OAAOC,SAAS;IAE9C,IAAMZ,OAAO,GAAGJ,OAAO,CAACK,WAAW,CAAC,IAAI,CAACb,KAAK,CAACuB,YAAY,EAAE;MAC3DR,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE,OAAO;MAChBG,MAAM,EAAE,IAAI,CAACnB,KAAK,CAACG,MAAM;MACzBe,KAAK,EAAE,IAAI,CAAClB,KAAK,CAACE,KAAK;MACvBe,gBAAgB,EAAE,IAAI,CAACjB,KAAK,CAACC,gBAAgB;MAC7CmB,UAAU,EAAE,YAAY;MACxBK,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;KACd,CAAC;IAEF,OAAOjB,OAAO,CAACc,QAAQ,CAACV,OAAO,CAAC;EAClC,CAAC;EACH,kBAAC;AAAD,CAAC,EAzDD;AA2DA,eAAeP,WAAW","names":["PNG","png","image","bitsPerComponent","width","height","colorSpace","PngEmbedder","imageData","load","context","ref","SMask","embedAlphaChannel","xObject","flateStream","rgbChannel","Type","Subtype","BitsPerComponent","Width","Height","ColorSpace","assign","register","alphaChannel","undefined","Decode"],"sourceRoot":"","sources":["../../../src/core/embedders/PngEmbedder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}