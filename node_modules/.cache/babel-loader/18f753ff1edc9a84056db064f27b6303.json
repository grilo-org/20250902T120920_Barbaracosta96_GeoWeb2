{"ast":null,"code":"import PDFArray from \"./objects/PDFArray\";\nimport PDFDict from \"./objects/PDFDict\";\nimport PDFName from \"./objects/PDFName\";\nimport PDFRef from \"./objects/PDFRef\";\nimport PDFStream from \"./objects/PDFStream\";\nimport PDFPageLeaf from \"./structures/PDFPageLeaf\";\n/**\n * PDFObjectCopier copies PDFObjects from a src context to a dest context.\n * The primary use case for this is to copy pages between PDFs.\n *\n * _Copying_ an object with a PDFObjectCopier is different from _cloning_ an\n * object with its [[PDFObject.clone]] method:\n *\n * ```\n *   const src: PDFContext = ...\n *   const dest: PDFContext = ...\n *   const originalObject: PDFObject = ...\n *   const copiedObject = PDFObjectCopier.for(src, dest).copy(originalObject);\n *   const clonedObject = originalObject.clone();\n * ```\n *\n * Copying an object is equivalent to cloning it and then copying over any other\n * objects that it references. Note that only dictionaries, arrays, and streams\n * (or structures build from them) can contain indirect references to other\n * objects. Copying a PDFObject that is not a dictionary, array, or stream is\n * supported, but is equivalent to cloning it.\n */\nvar PDFObjectCopier = /** @class */function () {\n  function PDFObjectCopier(src, dest) {\n    var _this = this;\n    this.traversedObjects = new Map();\n    // prettier-ignore\n    this.copy = function (object) {\n      return object instanceof PDFPageLeaf ? _this.copyPDFPage(object) : object instanceof PDFDict ? _this.copyPDFDict(object) : object instanceof PDFArray ? _this.copyPDFArray(object) : object instanceof PDFStream ? _this.copyPDFStream(object) : object instanceof PDFRef ? _this.copyPDFIndirectObject(object) : object.clone();\n    };\n    this.copyPDFPage = function (originalPage) {\n      var clonedPage = originalPage.clone();\n      // Move any entries that the originalPage is inheriting from its parent\n      // tree nodes directly into originalPage so they are preserved during\n      // the copy.\n      var InheritableEntries = PDFPageLeaf.InheritableEntries;\n      for (var idx = 0, len = InheritableEntries.length; idx < len; idx++) {\n        var key = PDFName.of(InheritableEntries[idx]);\n        var value = clonedPage.getInheritableAttribute(key);\n        if (!clonedPage.get(key) && value) clonedPage.set(key, value);\n      }\n      // Remove the parent reference to prevent the whole donor document's page\n      // tree from being copied when we only need a single page.\n      clonedPage.delete(PDFName.of('Parent'));\n      return _this.copyPDFDict(clonedPage);\n    };\n    this.copyPDFDict = function (originalDict) {\n      if (_this.traversedObjects.has(originalDict)) {\n        return _this.traversedObjects.get(originalDict);\n      }\n      var clonedDict = originalDict.clone(_this.dest);\n      _this.traversedObjects.set(originalDict, clonedDict);\n      var entries = originalDict.entries();\n      for (var idx = 0, len = entries.length; idx < len; idx++) {\n        var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n        clonedDict.set(key, _this.copy(value));\n      }\n      return clonedDict;\n    };\n    this.copyPDFArray = function (originalArray) {\n      if (_this.traversedObjects.has(originalArray)) {\n        return _this.traversedObjects.get(originalArray);\n      }\n      var clonedArray = originalArray.clone(_this.dest);\n      _this.traversedObjects.set(originalArray, clonedArray);\n      for (var idx = 0, len = originalArray.size(); idx < len; idx++) {\n        var value = originalArray.get(idx);\n        clonedArray.set(idx, _this.copy(value));\n      }\n      return clonedArray;\n    };\n    this.copyPDFStream = function (originalStream) {\n      if (_this.traversedObjects.has(originalStream)) {\n        return _this.traversedObjects.get(originalStream);\n      }\n      var clonedStream = originalStream.clone(_this.dest);\n      _this.traversedObjects.set(originalStream, clonedStream);\n      var entries = originalStream.dict.entries();\n      for (var idx = 0, len = entries.length; idx < len; idx++) {\n        var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n        clonedStream.dict.set(key, _this.copy(value));\n      }\n      return clonedStream;\n    };\n    this.copyPDFIndirectObject = function (ref) {\n      var alreadyMapped = _this.traversedObjects.has(ref);\n      if (!alreadyMapped) {\n        var newRef = _this.dest.nextRef();\n        _this.traversedObjects.set(ref, newRef);\n        var dereferencedValue = _this.src.lookup(ref);\n        if (dereferencedValue) {\n          var cloned = _this.copy(dereferencedValue);\n          _this.dest.assign(newRef, cloned);\n        }\n      }\n      return _this.traversedObjects.get(ref);\n    };\n    this.src = src;\n    this.dest = dest;\n  }\n  PDFObjectCopier.for = function (src, dest) {\n    return new PDFObjectCopier(src, dest);\n  };\n  return PDFObjectCopier;\n}();\nexport default PDFObjectCopier;","map":{"version":3,"mappings":"AAAA,OAAOA,QAAQ;AACf,OAAOC,OAAO;AACd,OAAOC,OAAO;AAEd,OAAOC,MAAM;AACb,OAAOC,SAAS;AAEhB,OAAOC,WAAW;AAElB;;;;;;;;;;;;;;;;;;;;;AAqBA;EAQE,yBAAoBC,GAAe,EAAEC,IAAgB;IAArD;IAFiB,qBAAgB,GAAG,IAAIC,GAAG,EAAwB;IAOnE;IACA,SAAI,GAAG,UAAsBC,MAAS;MAAQ,OAC1CA,MAAM,YAAYJ,WAAW,GAAGK,KAAI,CAACC,WAAW,CAACF,MAAM,CAAC,GACxDA,MAAM,YAAYR,OAAO,GAAOS,KAAI,CAACE,WAAW,CAACH,MAAM,CAAC,GACxDA,MAAM,YAAYT,QAAQ,GAAMU,KAAI,CAACG,YAAY,CAACJ,MAAM,CAAC,GACzDA,MAAM,YAAYL,SAAS,GAAKM,KAAI,CAACI,aAAa,CAACL,MAAM,CAAC,GAC1DA,MAAM,YAAYN,MAAM,GAAQO,KAAI,CAACK,qBAAqB,CAACN,MAAM,CAAC,GAClEA,MAAM,CAACO,KAAK,EAAE;IAN4B,CAOxC;IAEE,gBAAW,GAAG,UAACC,YAAyB;MAC9C,IAAMC,UAAU,GAAGD,YAAY,CAACD,KAAK,EAAE;MAEvC;MACA;MACA;MACQ,sBAAkB,GAAKX,WAAW,mBAAhB;MAC1B,KAAK,IAAIc,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGC,kBAAkB,CAACC,MAAM,EAAEH,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QACnE,IAAMI,GAAG,GAAGrB,OAAO,CAACsB,EAAE,CAACH,kBAAkB,CAACF,GAAG,CAAC,CAAC;QAC/C,IAAMM,KAAK,GAAGP,UAAU,CAACQ,uBAAuB,CAACH,GAAG,CAAE;QACtD,IAAI,CAACL,UAAU,CAACS,GAAG,CAACJ,GAAG,CAAC,IAAIE,KAAK,EAAEP,UAAU,CAACU,GAAG,CAACL,GAAG,EAAEE,KAAK,CAAC;;MAG/D;MACA;MACAP,UAAU,CAACW,MAAM,CAAC3B,OAAO,CAACsB,EAAE,CAAC,QAAQ,CAAC,CAAC;MAEvC,OAAOd,KAAI,CAACE,WAAW,CAACM,UAAU,CAAgB;IACpD,CAAC;IAEO,gBAAW,GAAG,UAACY,YAAqB;MAC1C,IAAIpB,KAAI,CAACqB,gBAAgB,CAACC,GAAG,CAACF,YAAY,CAAC,EAAE;QAC3C,OAAOpB,KAAI,CAACqB,gBAAgB,CAACJ,GAAG,CAACG,YAAY,CAAY;;MAG3D,IAAMG,UAAU,GAAGH,YAAY,CAACd,KAAK,CAACN,KAAI,CAACH,IAAI,CAAC;MAChDG,KAAI,CAACqB,gBAAgB,CAACH,GAAG,CAACE,YAAY,EAAEG,UAAU,CAAC;MAEnD,IAAMC,OAAO,GAAGJ,YAAY,CAACI,OAAO,EAAE;MAEtC,KAAK,IAAIf,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGc,OAAO,CAACZ,MAAM,EAAEH,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAClD,SAAee,OAAO,CAACf,GAAG,CAAC;UAA1BI,GAAG;UAAEE,KAAK,QAAgB;QACjCQ,UAAU,CAACL,GAAG,CAACL,GAAG,EAAEb,KAAI,CAACyB,IAAI,CAACV,KAAK,CAAC,CAAC;;MAGvC,OAAOQ,UAAU;IACnB,CAAC;IAEO,iBAAY,GAAG,UAACG,aAAuB;MAC7C,IAAI1B,KAAI,CAACqB,gBAAgB,CAACC,GAAG,CAACI,aAAa,CAAC,EAAE;QAC5C,OAAO1B,KAAI,CAACqB,gBAAgB,CAACJ,GAAG,CAACS,aAAa,CAAa;;MAG7D,IAAMC,WAAW,GAAGD,aAAa,CAACpB,KAAK,CAACN,KAAI,CAACH,IAAI,CAAC;MAClDG,KAAI,CAACqB,gBAAgB,CAACH,GAAG,CAACQ,aAAa,EAAEC,WAAW,CAAC;MAErD,KAAK,IAAIlB,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGgB,aAAa,CAACE,IAAI,EAAE,EAAEnB,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAC9D,IAAMM,KAAK,GAAGW,aAAa,CAACT,GAAG,CAACR,GAAG,CAAC;QACpCkB,WAAW,CAACT,GAAG,CAACT,GAAG,EAAET,KAAI,CAACyB,IAAI,CAACV,KAAK,CAAC,CAAC;;MAGxC,OAAOY,WAAW;IACpB,CAAC;IAEO,kBAAa,GAAG,UAACE,cAAyB;MAChD,IAAI7B,KAAI,CAACqB,gBAAgB,CAACC,GAAG,CAACO,cAAc,CAAC,EAAE;QAC7C,OAAO7B,KAAI,CAACqB,gBAAgB,CAACJ,GAAG,CAACY,cAAc,CAAc;;MAG/D,IAAMC,YAAY,GAAGD,cAAc,CAACvB,KAAK,CAACN,KAAI,CAACH,IAAI,CAAC;MACpDG,KAAI,CAACqB,gBAAgB,CAACH,GAAG,CAACW,cAAc,EAAEC,YAAY,CAAC;MAEvD,IAAMN,OAAO,GAAGK,cAAc,CAACE,IAAI,CAACP,OAAO,EAAE;MAC7C,KAAK,IAAIf,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGc,OAAO,CAACZ,MAAM,EAAEH,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAClD,SAAee,OAAO,CAACf,GAAG,CAAC;UAA1BI,GAAG;UAAEE,KAAK,QAAgB;QACjCe,YAAY,CAACC,IAAI,CAACb,GAAG,CAACL,GAAG,EAAEb,KAAI,CAACyB,IAAI,CAACV,KAAK,CAAC,CAAC;;MAG9C,OAAOe,YAAY;IACrB,CAAC;IAEO,0BAAqB,GAAG,UAACE,GAAW;MAC1C,IAAMC,aAAa,GAAGjC,KAAI,CAACqB,gBAAgB,CAACC,GAAG,CAACU,GAAG,CAAC;MAEpD,IAAI,CAACC,aAAa,EAAE;QAClB,IAAMC,MAAM,GAAGlC,KAAI,CAACH,IAAI,CAACsC,OAAO,EAAE;QAClCnC,KAAI,CAACqB,gBAAgB,CAACH,GAAG,CAACc,GAAG,EAAEE,MAAM,CAAC;QAEtC,IAAME,iBAAiB,GAAGpC,KAAI,CAACJ,GAAG,CAACyC,MAAM,CAACL,GAAG,CAAC;QAC9C,IAAII,iBAAiB,EAAE;UACrB,IAAME,MAAM,GAAGtC,KAAI,CAACyB,IAAI,CAACW,iBAAiB,CAAC;UAC3CpC,KAAI,CAACH,IAAI,CAAC0C,MAAM,CAACL,MAAM,EAAEI,MAAM,CAAC;;;MAIpC,OAAOtC,KAAI,CAACqB,gBAAgB,CAACJ,GAAG,CAACe,GAAG,CAAW;IACjD,CAAC;IApGC,IAAI,CAACpC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAVO2C,mBAAG,GAAG,UAAC5C,GAAe,EAAEC,IAAgB;IAC7C,WAAI2C,eAAe,CAAC5C,GAAG,EAAEC,IAAI,CAAC;EAA9B,CAA8B;EA4GlC,sBAAC;CAAA,EA9GD;AAgHA,eAAe2C,eAAe","names":["PDFArray","PDFDict","PDFName","PDFRef","PDFStream","PDFPageLeaf","src","dest","Map","object","_this","copyPDFPage","copyPDFDict","copyPDFArray","copyPDFStream","copyPDFIndirectObject","clone","originalPage","clonedPage","idx","len","InheritableEntries","length","key","of","value","getInheritableAttribute","get","set","delete","originalDict","traversedObjects","has","clonedDict","entries","copy","originalArray","clonedArray","size","originalStream","clonedStream","dict","ref","alreadyMapped","newRef","nextRef","dereferencedValue","lookup","cloned","assign","PDFObjectCopier"],"sourceRoot":"","sources":["../../src/core/PDFObjectCopier.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}