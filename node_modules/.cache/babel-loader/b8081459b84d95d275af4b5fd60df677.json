{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sulli\\\\Git\\\\GeoWeb\\\\src\\\\app\\\\SGI\\\\EPIS\\\\DashBoardSSMT.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./NavBarSSMT\";\nimport { Chart } from \"react-google-charts\";\nimport Conexao from '../../Config/conexao';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DashBoardSSMT() {\n  _s();\n  const [entregaOuDevolucao, setEntregaOuDevolucao] = useState([]);\n  async function getEntegaOuDevolucao() {\n    const res = await axios.get(Conexao.api + 'ListaEntregaEpiWEBsemFILTRO.php');\n    if (res.data.success === false) {} else {\n      setEntregaOuDevolucao(res.data.result);\n    }\n  }\n  ;\n  useEffect(() => {\n    getEntegaOuDevolucao();\n  });\n  const totalsByFunction = {};\n\n  // Calcule os totais de EPIs por função\n  entregaOuDevolucao.forEach(item => {\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\n    if (!totalsByFunction[item.funcao]) {\n      totalsByFunction[item.funcao] = totalEPIs;\n    } else {\n      totalsByFunction[item.funcao] += totalEPIs;\n    }\n  });\n  const data = [['Função', 'Total de EPIs']];\n  Object.keys(totalsByFunction).forEach(funcao => {\n    data.push([funcao, totalsByFunction[funcao]]);\n  });\n  const totalsBySector = {};\n\n  // Calcule os totais de EPIs por setor\n  entregaOuDevolucao.forEach(item => {\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\n    if (!totalsBySector[item.setor]) {\n      totalsBySector[item.setor] = totalEPIs;\n    } else {\n      totalsBySector[item.setor] += totalEPIs;\n    }\n  });\n\n  // Transforme os dados em um formato adequado para o Google Charts\n  const chartData = [['Setor', 'Total de EPIs']];\n  Object.keys(totalsBySector).forEach(setor => {\n    chartData.push([setor, totalsBySector[setor]]);\n  });\n  const totalsByStatus = {\n    ENTREGUE: 0,\n    DEVOLVIDO: 0\n    // Adicione outros status conforme necessário\n  };\n\n  // Calcule os totais de EPIs por status\n  entregaOuDevolucao.forEach(item => {\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\n    totalsByStatus[item.substatus] += totalEPIs;\n  });\n\n  // Transforme os dados em um formato adequado para o Google Charts\n  const chartData2 = [['Status', 'Total de EPIs']];\n  Object.keys(totalsByStatus).forEach(status => {\n    chartData2.push([status, totalsByStatus[status]]);\n  });\n\n  /*   const totalsByStatusAndSector = {};\r\n  \r\n    \r\n    entregaOuDevolucao.forEach(item => {\r\n      const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n      if (!totalsByStatusAndSector[item.setor]) {\r\n        totalsByStatusAndSector[item.setor] = {};\r\n      }\r\n      if (!totalsByStatusAndSector[item.setor][item.substatus]) {\r\n        totalsByStatusAndSector[item.setor][item.substatus] = totalEPIs;\r\n      } else {\r\n        totalsByStatusAndSector[item.setor][item.substatus] += totalEPIs;\r\n      }\r\n    });\r\n  \r\n    \r\n    const chartData3 = [['Setor', 'Entregue', 'Devolvido', ]];\r\n    Object.keys(totalsByStatusAndSector).forEach(setor => {\r\n      const row = [setor];\r\n      Object.keys(totalsByStatusAndSector[setor]).forEach(substatus => {\r\n        row.push(totalsByStatusAndSector[setor][substatus]);\r\n      });\r\n      chartData3.push(row);\r\n    }); */\n\n  const episSelected = {};\n\n  // Calcule a quantidade total de cada EPI entregue\n  entregaOuDevolucao.forEach(item => {\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\n    if (!episSelected[item.descricaoEpi]) {\n      episSelected[item.descricaoEpi] = totalEPIs;\n    } else {\n      episSelected[item.descricaoEpi] += totalEPIs;\n    }\n  });\n\n  // Transforme os dados em um formato adequado para o Google Charts\n  const chartData4 = [['EPI', 'Quantidade Entregue']];\n  Object.keys(episSelected).forEach(epi => {\n    chartData4.push([epi, episSelected[epi]]);\n  });\n\n  // Ordene os dados pelo valor de quantidade entregue\n  chartData4.sort((a, b) => b[1] - a[1]);\n  const totalsByStatusAndSector = {};\n\n  // Calcule os totais de EPIs por status e setor\n  entregaOuDevolucao.forEach(item => {\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\n    if (!totalsByStatusAndSector[item.setor]) {\n      totalsByStatusAndSector[item.setor] = {};\n    }\n    if (!totalsByStatusAndSector[item.setor][item.substatus]) {\n      totalsByStatusAndSector[item.setor][item.substatus] = totalEPIs;\n    } else {\n      totalsByStatusAndSector[item.setor][item.substatus] += totalEPIs;\n    }\n  });\n\n  /*  // Transforme os dados em um formato adequado para o Google Charts\r\n   const substatusTypes = Object.keys(totalsByStatusAndSector[Object.keys(totalsByStatusAndSector)[0]]);\r\n   const chartDataByStatusAndSector = [['Setor', ...substatusTypes]];\r\n   Object.keys(totalsByStatusAndSector).forEach(setor => {\r\n     const row = [setor];\r\n     substatusTypes.forEach(substatus => {\r\n       row.push(totalsByStatusAndSector[setor][substatus] || 0);\r\n     });\r\n     chartDataByStatusAndSector.push(row);\r\n   }); */\n\n  let substatusTypes = [];\n  if (Object.keys(totalsByStatusAndSector).length > 0) {\n    substatusTypes = Object.keys(totalsByStatusAndSector[Object.keys(totalsByStatusAndSector)[0]]);\n  }\n  const chartDataByStatusAndSector = [['Setor', ...substatusTypes]];\n  Object.keys(totalsByStatusAndSector).forEach(setor => {\n    const row = [setor];\n    substatusTypes.forEach(substatus => {\n      row.push(totalsByStatusAndSector[setor][substatus] || 0);\n    });\n    chartDataByStatusAndSector.push(row);\n  });\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"titulolaboratorio container-fluid \",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"texttitulo\",\n        children: \"DashBoard SSMT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"container d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" container-fluid text-center scrollable col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Entregas por fun\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '500px',\n          height: '300px',\n          chartType: \"ColumnChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Carregando Gr\\xE1fico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this),\n          data: data,\n          options: {\n            chart: {\n              title: 'Entregas por Função',\n              subtitle: 'Total de EPIs Entregues por Função'\n            },\n            hAxis: {\n              title: 'Função'\n            },\n            vAxis: {\n              title: 'Total de EPIs',\n              minValue: 0\n            },\n            colors: ['#3CB371']\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" container text-center col-6 offset-1 \",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Status de EPIs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '500px',\n          height: '300px',\n          chartType: \"PieChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Carregando Gr\\xE1fico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this),\n          data: chartData2,\n          options: {\n            title: 'Distribuição de EPIs por Status',\n            colors: ['#3CB371', '#dc3912']\n          },\n          rootProps: {\n            'data-testid': '2'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"container text-center mt-5  d-flex ms-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" container  text-center  col-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" container-fluid align-items-cente scrollable text-center col-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Status de EPIs por Setor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '800px',\n          height: '400px',\n          chartType: \"BarChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Carregando Gr\\xE1fico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this),\n          data: chartDataByStatusAndSector,\n          options: {\n            title: 'Distribuição de EPIs por Status e Setor',\n            isStacked: true,\n            colors: ['#3CB371', '#dc3912']\n          },\n          rootProps: {\n            'data-testid': '3'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" container text-center col-auto offset-1 scrollable\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" EPIs Mais Entregues\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '500px',\n          height: '400px',\n          chartType: \"ColumnChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Carregando Gr\\xE1fico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this),\n          data: chartData4,\n          options: {\n            title: 'EPIs Mais Entregues',\n            hAxis: {\n              title: 'EPIs'\n            },\n            vAxis: {\n              title: 'Quantidade Entregue',\n              minValue: 0\n            },\n            colors: ['#3CB371']\n          },\n          rootProps: {\n            'data-testid': '4'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n}\n_s(DashBoardSSMT, \"vr0k0aWmCLmA6fC0bCMBAME1NWI=\");\n_c = DashBoardSSMT;\n;\nvar _c;\n$RefreshReg$(_c, \"DashBoardSSMT\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","Chart","Conexao","axios","moment","DashBoardSSMT","entregaOuDevolucao","setEntregaOuDevolucao","getEntegaOuDevolucao","res","get","api","data","success","result","totalsByFunction","forEach","item","totalEPIs","parseInt","qtd","und","funcao","Object","keys","push","totalsBySector","setor","chartData","totalsByStatus","ENTREGUE","DEVOLVIDO","substatus","chartData2","status","episSelected","descricaoEpi","chartData4","epi","sort","a","b","totalsByStatusAndSector","substatusTypes","length","chartDataByStatusAndSector","row","chart","title","subtitle","hAxis","vAxis","minValue","colors","isStacked"],"sources":["C:/Users/sulli/Git/GeoWeb/src/app/SGI/EPIS/DashBoardSSMT.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Navbar from \"./NavBarSSMT\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport Conexao from '../../Config/conexao';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\n\r\nexport default function DashBoardSSMT (){\r\n\r\n  const [entregaOuDevolucao, setEntregaOuDevolucao]=useState([]);\r\n\r\n  async function getEntegaOuDevolucao() {   \r\n    const res = await axios.get(Conexao.api + 'ListaEntregaEpiWEBsemFILTRO.php' );  \r\n    if (res.data.success === false) { \r\n    } else {  setEntregaOuDevolucao(res.data.result); }   \r\n  };\r\n\r\n\r\n  useEffect(()=>{getEntegaOuDevolucao();});\r\n\r\n\r\n  const totalsByFunction = {};\r\n\r\n  // Calcule os totais de EPIs por função\r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    if (!totalsByFunction[item.funcao]) {\r\n      totalsByFunction[item.funcao] = totalEPIs;\r\n    } else {\r\n      totalsByFunction[item.funcao] += totalEPIs;\r\n    }\r\n  });\r\n\r\n  const data = [['Função', 'Total de EPIs']];\r\n  Object.keys(totalsByFunction).forEach(funcao => {\r\n    data.push([funcao, totalsByFunction[funcao]]);\r\n  });\r\n\r\n\r\n  const totalsBySector = {};\r\n\r\n  // Calcule os totais de EPIs por setor\r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    if (!totalsBySector[item.setor]) {\r\n      totalsBySector[item.setor] = totalEPIs;\r\n    } else {\r\n      totalsBySector[item.setor] += totalEPIs;\r\n    }\r\n  });\r\n\r\n  // Transforme os dados em um formato adequado para o Google Charts\r\n  const chartData = [['Setor', 'Total de EPIs']];\r\n  Object.keys(totalsBySector).forEach(setor => {\r\n    chartData.push([setor, totalsBySector[setor]]);\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n  const totalsByStatus = {\r\n    ENTREGUE: 0,\r\n    DEVOLVIDO: 0,\r\n    // Adicione outros status conforme necessário\r\n  };\r\n\r\n  // Calcule os totais de EPIs por status\r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    totalsByStatus[item.substatus] += totalEPIs;\r\n  });\r\n\r\n  // Transforme os dados em um formato adequado para o Google Charts\r\n  const chartData2 = [['Status', 'Total de EPIs']];\r\n  Object.keys(totalsByStatus).forEach(status => {\r\n    chartData2.push([status, totalsByStatus[status]]);\r\n  });\r\n\r\n\r\n\r\n/*   const totalsByStatusAndSector = {};\r\n\r\n  \r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    if (!totalsByStatusAndSector[item.setor]) {\r\n      totalsByStatusAndSector[item.setor] = {};\r\n    }\r\n    if (!totalsByStatusAndSector[item.setor][item.substatus]) {\r\n      totalsByStatusAndSector[item.setor][item.substatus] = totalEPIs;\r\n    } else {\r\n      totalsByStatusAndSector[item.setor][item.substatus] += totalEPIs;\r\n    }\r\n  });\r\n\r\n  \r\n  const chartData3 = [['Setor', 'Entregue', 'Devolvido', ]];\r\n  Object.keys(totalsByStatusAndSector).forEach(setor => {\r\n    const row = [setor];\r\n    Object.keys(totalsByStatusAndSector[setor]).forEach(substatus => {\r\n      row.push(totalsByStatusAndSector[setor][substatus]);\r\n    });\r\n    chartData3.push(row);\r\n  }); */\r\n\r\n\r\n\r\n  const episSelected = {};\r\n\r\n  // Calcule a quantidade total de cada EPI entregue\r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    if (!episSelected[item.descricaoEpi]) {\r\n      episSelected[item.descricaoEpi] = totalEPIs;\r\n    } else {\r\n      episSelected[item.descricaoEpi] += totalEPIs;\r\n    }\r\n  });\r\n\r\n  // Transforme os dados em um formato adequado para o Google Charts\r\n  const chartData4 = [['EPI', 'Quantidade Entregue']];\r\n  Object.keys(episSelected).forEach(epi => {\r\n    chartData4.push([epi, episSelected[epi]]);\r\n  });\r\n\r\n  // Ordene os dados pelo valor de quantidade entregue\r\n  chartData4.sort((a, b) => b[1] - a[1]);\r\n\r\n\r\n\r\n\r\n\r\n  const totalsByStatusAndSector = {};\r\n\r\n  // Calcule os totais de EPIs por status e setor\r\n  entregaOuDevolucao.forEach(item => {\r\n    const totalEPIs = parseInt(item.qtd) * parseInt(item.und);\r\n    if (!totalsByStatusAndSector[item.setor]) {\r\n      totalsByStatusAndSector[item.setor] = {};\r\n    }\r\n    if (!totalsByStatusAndSector[item.setor][item.substatus]) {\r\n      totalsByStatusAndSector[item.setor][item.substatus] = totalEPIs;\r\n    } else {\r\n      totalsByStatusAndSector[item.setor][item.substatus] += totalEPIs;\r\n    }\r\n  });\r\n\r\n /*  // Transforme os dados em um formato adequado para o Google Charts\r\n  const substatusTypes = Object.keys(totalsByStatusAndSector[Object.keys(totalsByStatusAndSector)[0]]);\r\n  const chartDataByStatusAndSector = [['Setor', ...substatusTypes]];\r\n  Object.keys(totalsByStatusAndSector).forEach(setor => {\r\n    const row = [setor];\r\n    substatusTypes.forEach(substatus => {\r\n      row.push(totalsByStatusAndSector[setor][substatus] || 0);\r\n    });\r\n    chartDataByStatusAndSector.push(row);\r\n  }); */\r\n\r\n\r\n  let substatusTypes = [];\r\nif (Object.keys(totalsByStatusAndSector).length > 0) {\r\n  substatusTypes = Object.keys(totalsByStatusAndSector[Object.keys(totalsByStatusAndSector)[0]]);\r\n}\r\n\r\nconst chartDataByStatusAndSector = [['Setor', ...substatusTypes]];\r\nObject.keys(totalsByStatusAndSector).forEach(setor => {\r\n  const row = [setor];\r\n  substatusTypes.forEach(substatus => {\r\n    row.push(totalsByStatusAndSector[setor][substatus] || 0);\r\n  });\r\n  chartDataByStatusAndSector.push(row);\r\n});\r\n\r\n\r\n\r\nreturn( <body>\r\n\r\n\r\n    <Navbar/>\r\n\r\n\r\n    <br/>\r\n      <div className='titulolaboratorio container-fluid '>\r\n        <h1 className='texttitulo'>DashBoard SSMT</h1>\r\n      </div> \r\n\r\n      <br/>\r\n\r\n      \r\n<body className=\"container d-flex\">\r\n\r\n\r\n<div className=\" container-fluid text-center scrollable col-6\">\r\n      <h1> Entregas por função</h1>\r\n      <Chart\r\n        width={'500px'}\r\n        height={'300px'}\r\n        chartType=\"ColumnChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={data}\r\n        options={{\r\n          chart: {\r\n            title: 'Entregas por Função',\r\n            subtitle: 'Total de EPIs Entregues por Função',\r\n          },\r\n          hAxis: {\r\n            title: 'Função',\r\n          },\r\n          vAxis: {\r\n            title: 'Total de EPIs',\r\n            minValue: 0,\r\n          },\r\n          colors: ['#3CB371'  ],\r\n        }}\r\n        rootProps={{ 'data-testid': '1' }}\r\n      />\r\n    </div>\r\n\r\n\r\n\r\n  {/*   <div>\r\n      <h1>Gráfico de Setores de Entregas de EPIs</h1>\r\n      <Chart\r\n        width={'500px'}\r\n        height={'300px'}\r\n        chartType=\"PieChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={chartData}\r\n        options={{\r\n          title: 'Distribuição de EPIs por Setor',\r\n          colors: ['#3CB371' ,'#dc3912' ],\r\n        }}\r\n        rootProps={{ 'data-testid': '1' }}\r\n      />\r\n    </div> */}\r\n\r\n\r\n\r\n    <div  className=\" container text-center col-6 offset-1 \">\r\n      <h1> Status de EPIs</h1>\r\n      <Chart\r\n        width={'500px'}\r\n        height={'300px'}\r\n        chartType=\"PieChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={chartData2}\r\n        options={{\r\n          title: 'Distribuição de EPIs por Status',\r\n          colors: ['#3CB371' ,'#dc3912' ],\r\n        }}\r\n        rootProps={{ 'data-testid': '2' }}\r\n      />\r\n    </div>\r\n\r\n    </body>\r\n\r\n    <body className=\"container text-center mt-5  d-flex ms-5\">\r\n\r\n  {/*   <div>\r\n      <h1>Gráfico de Barra Empilhada de Status de EPIs por Setor</h1>\r\n      <Chart\r\n        width={'800px'}\r\n        height={'400px'}\r\n        chartType=\"BarChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={chartData3}\r\n        options={{\r\n          title: 'Distribuição de EPIs por Status e Setor',\r\n         // isStacked: true,\r\n          \r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n      />\r\n    </div> */}\r\n\r\n    <div className=\" container  text-center  col-1\"></div> \r\n\r\n\r\n<div  className=\" container-fluid align-items-cente scrollable text-center col-8\">\r\n      <h3> Status de EPIs por Setor</h3>\r\n      <Chart\r\n        width={'800px'}\r\n        height={'400px'}\r\n        chartType=\"BarChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={chartDataByStatusAndSector}\r\n        options={{\r\n          title: 'Distribuição de EPIs por Status e Setor',\r\n          isStacked: true,\r\n          colors: ['#3CB371' ,'#dc3912' ],\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n      />\r\n    </div>\r\n\r\n\r\n\r\n    <div  className=\" container text-center col-auto offset-1 scrollable\">\r\n      <h1> EPIs Mais Entregues</h1>\r\n      <Chart\r\n        width={'500px'}\r\n        height={'400px'}\r\n        chartType=\"ColumnChart\"\r\n        loader={<div>Carregando Gráfico</div>}\r\n        data={chartData4}\r\n        options={{\r\n          title: 'EPIs Mais Entregues',\r\n          hAxis: {\r\n            title: 'EPIs',\r\n          },\r\n          vAxis: {\r\n            title: 'Quantidade Entregue',\r\n            minValue: 0,\r\n          },\r\n          colors: ['#3CB371' ],\r\n          \r\n        }}\r\n        rootProps={{ 'data-testid': '4' }}\r\n      />\r\n    </div>\r\n\r\n    </body>\r\n\r\n\r\n<br/><br/><br/>\r\n\r\n</body>\r\n\r\n)\r\n\r\n\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}