{"ast":null,"code":"import { setFillingCmykColor, setFillingGrayscaleColor, setFillingRgbColor, setStrokingCmykColor, setStrokingGrayscaleColor, setStrokingRgbColor } from \"./operators\";\nimport { assertRange, error } from \"../utils\";\nexport var ColorTypes;\n(function (ColorTypes) {\n  ColorTypes[\"Grayscale\"] = \"Grayscale\";\n  ColorTypes[\"RGB\"] = \"RGB\";\n  ColorTypes[\"CMYK\"] = \"CMYK\";\n})(ColorTypes || (ColorTypes = {}));\nexport var grayscale = function (gray) {\n  assertRange(gray, 'gray', 0.0, 1.0);\n  return {\n    type: ColorTypes.Grayscale,\n    gray: gray\n  };\n};\nexport var rgb = function (red, green, blue) {\n  assertRange(red, 'red', 0, 1);\n  assertRange(green, 'green', 0, 1);\n  assertRange(blue, 'blue', 0, 1);\n  return {\n    type: ColorTypes.RGB,\n    red: red,\n    green: green,\n    blue: blue\n  };\n};\nexport var cmyk = function (cyan, magenta, yellow, key) {\n  assertRange(cyan, 'cyan', 0, 1);\n  assertRange(magenta, 'magenta', 0, 1);\n  assertRange(yellow, 'yellow', 0, 1);\n  assertRange(key, 'key', 0, 1);\n  return {\n    type: ColorTypes.CMYK,\n    cyan: cyan,\n    magenta: magenta,\n    yellow: yellow,\n    key: key\n  };\n};\nvar Grayscale = ColorTypes.Grayscale,\n  RGB = ColorTypes.RGB,\n  CMYK = ColorTypes.CMYK;\n// prettier-ignore\nexport var setFillingColor = function (color) {\n  return color.type === Grayscale ? setFillingGrayscaleColor(color.gray) : color.type === RGB ? setFillingRgbColor(color.red, color.green, color.blue) : color.type === CMYK ? setFillingCmykColor(color.cyan, color.magenta, color.yellow, color.key) : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var setStrokingColor = function (color) {\n  return color.type === Grayscale ? setStrokingGrayscaleColor(color.gray) : color.type === RGB ? setStrokingRgbColor(color.red, color.green, color.blue) : color.type === CMYK ? setStrokingCmykColor(color.cyan, color.magenta, color.yellow, color.key) : error(\"Invalid color: \" + JSON.stringify(color));\n};\n// prettier-ignore\nexport var componentsToColor = function (comps, scale) {\n  if (scale === void 0) {\n    scale = 1;\n  }\n  return (comps === null || comps === void 0 ? void 0 : comps.length) === 1 ? grayscale(comps[0] * scale) : (comps === null || comps === void 0 ? void 0 : comps.length) === 3 ? rgb(comps[0] * scale, comps[1] * scale, comps[2] * scale) : (comps === null || comps === void 0 ? void 0 : comps.length) === 4 ? cmyk(comps[0] * scale, comps[1] * scale, comps[2] * scale, comps[3] * scale) : undefined;\n};\n// prettier-ignore\nexport var colorToComponents = function (color) {\n  return color.type === Grayscale ? [color.gray] : color.type === RGB ? [color.red, color.green, color.blue] : color.type === CMYK ? [color.cyan, color.magenta, color.yellow, color.key] : error(\"Invalid color: \" + JSON.stringify(color));\n};","map":{"version":3,"mappings":"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","names":["setFillingCmykColor","setFillingGrayscaleColor","setFillingRgbColor","setStrokingCmykColor","setStrokingGrayscaleColor","setStrokingRgbColor","assertRange","error","ColorTypes","grayscale","gray","type","Grayscale","rgb","red","green","blue","RGB","cmyk","cyan","magenta","yellow","key","CMYK","setFillingColor","color","JSON","stringify","setStrokingColor","componentsToColor","comps","scale","length","undefined","colorToComponents"],"sourceRoot":"","sources":["../../src/api/colors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}