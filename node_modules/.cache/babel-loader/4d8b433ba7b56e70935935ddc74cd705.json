{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultDropdownAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFHexString, PDFStream, PDFAcroComboBox, AcroChoiceFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\n * Represents a dropdown field of a [[PDFForm]].\n *\n * [[PDFDropdown]] fields are interactive text boxes that display a single\n * element (the currently selected value). The purpose of a dropdown is to\n * enable users to select a single option from a set of possible options. Users\n * can click on a dropdown to view the full list of options it provides.\n * Clicking on an option in the list will cause it to be selected and displayed\n * in the dropdown's text box. Some dropdowns allow users to enter text\n * directly into the box from their keyboard, rather than only being allowed to\n * choose an option from the list (see [[PDFDropdown.isEditable]]).\n */\nvar PDFDropdown = /** @class */function (_super) {\n  __extends(PDFDropdown, _super);\n  function PDFDropdown(acroComboBox, ref, doc) {\n    var _this = _super.call(this, acroComboBox, ref, doc) || this;\n    assertIs(acroComboBox, 'acroComboBox', [[PDFAcroComboBox, 'PDFAcroComboBox']]);\n    _this.acroField = acroComboBox;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this dropdown. These options will be\n   * displayed to users who click on this dropdown in a PDF reader.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const options = dropdown.getOptions()\n   * console.log('Dropdown options:', options)\n   * ```\n   * @returns The options for this dropdown.\n   */\n  PDFDropdown.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\n   * Get the selected options for this dropdown. These are the values that were\n   * selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * const selections = dropdown.getSelected()\n   * console.log('Dropdown selections:', selections)\n   * ```\n   * > **NOTE:** Note that PDF readers only display one selected option when\n   * > rendering dropdowns. However, the PDF specification does allow for\n   * > multiple values to be selected in a dropdown. As such, the `pdf-lib`\n   * > API supports this. However, in most cases the array returned by this\n   * > method will contain only a single element (or no elements).\n   * @returns The selected options in this dropdown.\n   */\n  PDFDropdown.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\n   * Set the list of options that are available for this dropdown. These are\n   * the values that will be available for users to select when they view this\n   * dropdown in a PDF reader. Note that preexisting options for this dropdown\n   * will be removed. Only the values passed as `options` will be available to\n   * select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('planets.dropdown')\n   * dropdown.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   * @param options The options that should be available in this dropdown.\n   */\n  PDFDropdown.prototype.setOptions = function (options) {\n    assertIs(options, 'options', [Array]);\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\n   * Add to the list of options that are available for this dropdown. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this dropdown will\n   * still be available for users to select.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('rockets.dropdown')\n   * dropdown.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * @param options New options that should be available in this dropdown.\n   */\n  PDFDropdown.prototype.addOptions = function (options) {\n    assertIs(options, 'options', ['string', Array]);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\n   * Select one or more values for this dropdown. This operation is analogous\n   * to a human user opening the dropdown in a PDF reader and clicking on a\n   * value to select it. This method will update the underlying state of the\n   * dropdown to indicate which values have been selected. PDF libraries and\n   * readers will be able to extract these values from the saved document and\n   * determine which values were selected.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('best.superhero.dropdown')\n   * dropdown.select('One Punch Man')\n   * ```\n   *\n   * This method will mark this dropdown as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the selected option inside the widgets of this dropdown.\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if the selected option for this field\n   * contains characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFDropdown.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * Selecting an option that does not exist in this dropdown's option list\n   * (see [[PDFDropdown.getOptions]]) will enable editing on this dropdown\n   * (see [[PDFDropdown.enableEditing]]).\n   *\n   * > **NOTE:** PDF readers only display one selected option when rendering\n   * > dropdowns. However, the PDF specification does allow for multiple values\n   * > to be selected in a dropdown. As such, the `pdf-lib` API supports this.\n   * > However, it is not recommended to select more than one value with this\n   * > method, as only one will be visible. [[PDFOptionList]] fields are better\n   * > suited for displaying multiple selected values.\n   *\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  PDFDropdown.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    var hasCustomOption = optionsArr.find(function (option) {\n      return !validOptions.includes(option);\n    });\n    if (hasCustomOption) this.enableEditing();\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\n   * Clear all selected values for this dropdown. This operation is equivalent\n   * to selecting an empty list. This method will update the underlying state\n   * of the dropdown to indicate that no values have been selected.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.clear()\n   * ```\n   * This method will mark this text field as dirty. See [[PDFDropdown.select]]\n   * for more details about what this means.\n   */\n  PDFDropdown.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this dropdown. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.setFontSize(4)\n   * dropdown.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFDropdown.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Returns `true` if users are allowed to edit the selected value of this\n   * dropdown directly and are not constrained by the list of available\n   * options. See [[PDFDropdown.enableEditing]] and\n   * [[PDFDropdown.disableEditing]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isEditable()) console.log('Editing is enabled')\n   * ```\n   * @returns Whether or not this dropdown is editable.\n   */\n  PDFDropdown.prototype.isEditable = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Edit);\n  };\n  /**\n   * Allow users to edit the selected value of this dropdown in PDF readers\n   * with their keyboard. This means that the selected value of this dropdown\n   * will not be constrained by the list of available options. However, if this\n   * dropdown has any available options, users will still be allowed to select\n   * from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableEditing()\n   * ```\n   */\n  PDFDropdown.prototype.enableEditing = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, true);\n  };\n  /**\n   * Do not allow users to edit the selected value of this dropdown in PDF\n   * readers with their keyboard. This will constrain the selected value of\n   * this dropdown to the list of available options. Users will only be able\n   * to select an option from that list.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableEditing()\n   * ```\n   */\n  PDFDropdown.prototype.disableEditing = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, false);\n  };\n  /**\n   * Returns `true` if the option list of this dropdown is always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the dropdown. See [[PDFDropdown.enableSorting]] and\n   * [[PDFDropdown.disableSorting]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this dropdown's options are sorted.\n   */\n  PDFDropdown.prototype.isSorted = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  };\n  /**\n   * Always display the option list of this dropdown in alphabetical order,\n   * irrespective of the order in which the options were added to this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSorting()\n   * ```\n   */\n  PDFDropdown.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  };\n  /**\n   * Do not always display the option list of this dropdown in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to the list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSorting()\n   * ```\n   */\n  PDFDropdown.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  };\n  /**\n   * Returns `true` if multiple options can be selected from this dropdown's\n   * option list. See [[PDFDropdown.enableMultiselect]] and\n   * [[PDFDropdown.disableMultiselect]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  PDFDropdown.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  };\n  /**\n   * Allow users to select more than one option from this dropdown's option\n   * list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableMultiselect()\n   * ```\n   */\n  PDFDropdown.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\n   * Do not allow users to select more than one option from this dropdown's\n   * option list. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableMultiselect()\n   * ```\n   */\n  PDFDropdown.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\n   * Returns `true` if the selected option should be spell checked by PDF\n   * readers. Spell checking will only be performed if this dropdown allows\n   * editing (see [[PDFDropdown.isEditable]]). See\n   * [[PDFDropdown.enableSpellChecking]] and\n   * [[PDFDropdown.disableSpellChecking]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSpellChecked()) console.log('Spell checking is enabled')\n   * ```\n   * @returns Whether or not this dropdown can be spell checked.\n   */\n  PDFDropdown.prototype.isSpellChecked = function () {\n    return !this.acroField.hasFlag(AcroChoiceFlags.DoNotSpellCheck);\n  };\n  /**\n   * Allow PDF readers to spell check the selected option of this dropdown.\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSpellChecking()\n   * ```\n   */\n  PDFDropdown.prototype.enableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, false);\n  };\n  /**\n   * Do not allow PDF readers to spell check the selected option of this\n   * dropdown. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSpellChecking()\n   * ```\n   */\n  PDFDropdown.prototype.disableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, true);\n  };\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this dropdown field (by clicking\n   * outside of it - on another field, for example). See\n   * [[PDFDropdown.enableSelectOnClick]] and\n   * [[PDFDropdown.disableSelectOnClick]]. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  PDFDropdown.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this dropdown field (by clicking\n   * outside of it - on another field, for example). For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.enableSelectOnClick()\n   * ```\n   */\n  PDFDropdown.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\n   * Wait to store the option selected by a user until they leave this dropdown\n   * field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.disableSelectOnClick()\n   * ```\n   */\n  PDFDropdown.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\n   * Show this dropdown on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('best.gundam')\n   * dropdown.setOptions(['Exia', 'Dynames'])\n   * dropdown.select('Exia')\n   *\n   * dropdown.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this dropdown field.\n   * @param page The page to which this dropdown widget should be added.\n   * @param options The options to be used when adding this dropdown widget.\n   */\n  PDFDropdown.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this dropdown\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this dropdown has been marked as dirty, or if any of\n   * this dropdown's widgets do not have an appearance stream. For example:\n   * ```js\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * if (dropdown.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this dropdown needs an appearance update.\n   */\n  PDFDropdown.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the default appearance provider for dropdowns. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFDropdown.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this dropdown's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for dropdowns will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const dropdown = form.getDropdown('some.dropdown.field')\n   * dropdown.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawTextField(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFDropdown.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFDropdown.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultDropdownAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getDropdown]] method, which will create an\n   * > instance of [[PDFDropdown]] for you.\n   *\n   * Create an instance of [[PDFDropdown]] from an existing acroComboBox and ref\n   *\n   * @param acroComboBox The underlying `PDFAcroComboBox` for this dropdown.\n   * @param ref The unique reference for this dropdown.\n   * @param doc The document to which this dropdown will belong.\n   */\n  PDFDropdown.of = function (acroComboBox, ref, doc) {\n    return new PDFDropdown(acroComboBox, ref, doc);\n  };\n  return PDFDropdown;\n}(PDFField);\nexport default PDFDropdown;","map":{"version":3,"mappings":"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","names":["PDFPage","PDFFont","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultDropdownAppearanceProvider","rgb","degrees","PDFHexString","PDFStream","PDFAcroComboBox","AcroChoiceFlags","assertIs","assertOrUndefined","assertPositive","__extends","acroComboBox","ref","doc","_super","_this","acroField","PDFDropdown","rawOptions","getOptions","options","Array","length","idx","len","display","value","decodeText","values","getValues","selected","optionObjects","fromText","setOptions","optionsArr","isArray","existingOptions","newOptions","concat","merge","validOptions","hasCustomOption","find","option","includes","enableEditing","markAsDirty","enableMultiselect","existingValues","setValues","fontSize","setFontSize","hasFlag","Edit","setFlagTo","Sort","MultiSelect","DoNotSpellCheck","CommitOnSelChange","page","textColor","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","width","height","rotate","hidden","widgetRef","context","register","dict","addWidget","font","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","isDirty","widgets","getWidgets","hasAppearances","getAppearances","normal","updateAppearances","provider","Function","markAsClean","apProvider","appearances","updateWidgetAppearanceWithFont"],"sourceRoot":"","sources":["../../../src/api/form/PDFDropdown.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}