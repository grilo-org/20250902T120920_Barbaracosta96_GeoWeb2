{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFStream, PDFAcroPushButton } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nvar PDFButton = /** @class */function (_super) {\n  __extends(PDFButton, _super);\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n    assertIs(acroPushButton, 'acroButton', [[PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  }\n  /**\n   * Display an image inside the bounds of this button's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const button = form.getButton('some.button.field')\n   * button.setImage(pngImage, ImageAlignment.Center)\n   * ```\n   * This will update the appearances streams for each of this button's widgets.\n   * @param image The image that should be displayed.\n   * @param alignment The alignment of the image.\n   */\n  PDFButton.prototype.setImage = function (image, alignment) {\n    if (alignment === void 0) {\n      alignment = ImageAlignment.Center;\n    }\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n    this.markAsClean();\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this button. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * button.setFontSize(4)\n   * button.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFButton.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Show this button on the specified page with the given text. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('some.button.field')\n   *\n   * button.addToPage('Do Stuff', page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this button field.\n   * @param text The text to be displayed for this button widget.\n   * @param page The page to which this button widget should be added.\n   * @param options The options to be used when adding this button widget.\n   */\n  PDFButton.prototype.addToPage = function (\n  // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this button\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n      caption: text,\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this button has been marked as dirty, or if any of this\n   * button's widgets do not have an appearance stream. For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this button needs an appearance update.\n   */\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the default appearance provider for buttons. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for buttons will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return {\n   *     normal: drawButton(...),\n   *     down: drawButton(...),\n   *   }\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getButton]] method, which will create an\n   * > instance of [[PDFButton]] for you.\n   *\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n   *\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n   * @param ref The unique reference for this button.\n   * @param doc The document to which this button will belong.\n   */\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n  return PDFButton;\n}(PDFField);\nexport default PDFButton;","map":{"version":3,"mappings":"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","names":["PDFPage","PDFFont","ImageAlignment","normalizeAppearance","defaultButtonAppearanceProvider","PDFField","assertFieldAppearanceOptions","rgb","degrees","PDFStream","PDFAcroPushButton","assertIs","assertOrUndefined","assertPositive","__extends","acroPushButton","ref","doc","_super","_this","acroField","PDFButton","image","alignment","Center","widgets","getWidgets","idx","len","length","widget","streamRef","createImageAppearanceStream","updateWidgetAppearances","normal","markAsClean","fontSize","setFontSize","markAsDirty","text","page","options","createWidget","x","borderWidth","y","width","height","textColor","backgroundColor","borderColor","rotate","caption","hidden","widgetRef","context","register","dict","addWidget","font","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","isDirty","hasAppearances","getAppearances","updateAppearances","provider","Function","apProvider","appearances","updateWidgetAppearanceWithFont"],"sourceRoot":"","sources":["../../../src/api/form/PDFButton.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}