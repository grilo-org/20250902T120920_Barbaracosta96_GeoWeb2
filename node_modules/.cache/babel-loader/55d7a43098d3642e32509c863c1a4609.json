{"ast":null,"code":"export var toCharCode = function (character) {\n  return character.charCodeAt(0);\n};\nexport var toCodePoint = function (character) {\n  return character.codePointAt(0);\n};\nexport var toHexStringOfMinLength = function (num, minLength) {\n  return padStart(num.toString(16), minLength, '0').toUpperCase();\n};\nexport var toHexString = function (num) {\n  return toHexStringOfMinLength(num, 2);\n};\nexport var charFromCode = function (code) {\n  return String.fromCharCode(code);\n};\nexport var charFromHexCode = function (hex) {\n  return charFromCode(parseInt(hex, 16));\n};\nexport var padStart = function (value, length, padChar) {\n  var padding = '';\n  for (var idx = 0, len = length - value.length; idx < len; idx++) {\n    padding += padChar;\n  }\n  return padding + value;\n};\nexport var copyStringIntoBuffer = function (str, buffer, offset) {\n  var length = str.length;\n  for (var idx = 0; idx < length; idx++) {\n    buffer[offset++] = str.charCodeAt(idx);\n  }\n  return length;\n};\nexport var addRandomSuffix = function (prefix, suffixLength) {\n  if (suffixLength === void 0) {\n    suffixLength = 4;\n  }\n  return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n};\nexport var escapeRegExp = function (str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nexport var cleanText = function (text) {\n  return text.replace(/\\t|\\u0085|\\u2028|\\u2029/g, '    ').replace(/[\\b\\v]/g, '');\n};\nexport var escapedNewlineChars = ['\\\\n', '\\\\f', '\\\\r', '\\\\u000B'];\nexport var newlineChars = ['\\n', '\\f', '\\r', '\\u000B'];\nexport var isNewlineChar = function (text) {\n  return /^[\\n\\f\\r\\u000B]$/.test(text);\n};\nexport var lineSplit = function (text) {\n  return text.split(/[\\n\\f\\r\\u000B]/);\n};\nexport var mergeLines = function (text) {\n  return text.replace(/[\\n\\f\\r\\u000B]/g, ' ');\n};\n// JavaScript's String.charAt() method doesn work on strings containing UTF-16\n// characters (with high and low surrogate pairs), such as ðŸ’© (poo emoji). This\n// `charAtIndex()` function does.\n//\n// Credit: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js#L14-L48\nexport var charAtIndex = function (text, index) {\n  // Get the first code unit and code unit value\n  var cuFirst = text.charCodeAt(index);\n  var cuSecond;\n  var nextIndex = index + 1;\n  var length = 1;\n  if (\n  // Check if it's the start of a surrogate pair.\n  cuFirst >= 0xd800 && cuFirst <= 0xdbff &&\n  // high surrogate\n  text.length > nextIndex // there is a next code unit\n  ) {\n    cuSecond = text.charCodeAt(nextIndex);\n    if (cuSecond >= 0xdc00 && cuSecond <= 0xdfff) length = 2; // low surrogate\n  }\n\n  return [text.slice(index, index + length), length];\n};\nexport var charSplit = function (text) {\n  var chars = [];\n  for (var idx = 0, len = text.length; idx < len;) {\n    var _a = charAtIndex(text, idx),\n      c = _a[0],\n      cLen = _a[1];\n    chars.push(c);\n    idx += cLen;\n  }\n  return chars;\n};\nvar buildWordBreakRegex = function (wordBreaks) {\n  var newlineCharUnion = escapedNewlineChars.join('|');\n  var escapedRules = ['$'];\n  for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n    var wordBreak = wordBreaks[idx];\n    if (isNewlineChar(wordBreak)) {\n      throw new TypeError(\"`wordBreak` must not include \" + newlineCharUnion);\n    }\n    escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n  }\n  var breakRules = escapedRules.join('|');\n  return new RegExp(\"(\" + newlineCharUnion + \")|((.*?)(\" + breakRules + \"))\", 'gm');\n};\nexport var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n  var regex = buildWordBreakRegex(wordBreaks);\n  var words = cleanText(text).match(regex);\n  var currLine = '';\n  var currWidth = 0;\n  var lines = [];\n  var pushCurrLine = function () {\n    if (currLine !== '') lines.push(currLine);\n    currLine = '';\n    currWidth = 0;\n  };\n  for (var idx = 0, len = words.length; idx < len; idx++) {\n    var word = words[idx];\n    if (isNewlineChar(word)) {\n      pushCurrLine();\n    } else {\n      var width = computeWidthOfText(word);\n      if (currWidth + width > maxWidth) pushCurrLine();\n      currLine += word;\n      currWidth += width;\n    }\n  }\n  pushCurrLine();\n  return lines;\n};\n// See section \"7.9.4 Dates\" of the PDF specification\nvar dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\nexport var parseDate = function (dateStr) {\n  var match = dateStr.match(dateRegex);\n  if (!match) return undefined;\n  var year = match[1],\n    _a = match[2],\n    month = _a === void 0 ? '01' : _a,\n    _b = match[3],\n    day = _b === void 0 ? '01' : _b,\n    _c = match[4],\n    hours = _c === void 0 ? '00' : _c,\n    _d = match[5],\n    mins = _d === void 0 ? '00' : _d,\n    _e = match[6],\n    secs = _e === void 0 ? '00' : _e,\n    _f = match[7],\n    offsetSign = _f === void 0 ? 'Z' : _f,\n    _g = match[8],\n    offsetHours = _g === void 0 ? '00' : _g,\n    _h = match[9],\n    offsetMins = _h === void 0 ? '00' : _h;\n  // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n  var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n  var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n  return date;\n};\nexport var findLastMatch = function (value, regex) {\n  var _a;\n  var position = 0;\n  var lastMatch;\n  while (position < value.length) {\n    var match = value.substring(position).match(regex);\n    if (!match) return {\n      match: lastMatch,\n      pos: position\n    };\n    lastMatch = match;\n    position += ((_a = match.index) !== null && _a !== void 0 ? _a : 0) + match[0].length;\n  }\n  return {\n    match: lastMatch,\n    pos: position\n  };\n};","map":{"version":3,"mappings":"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","names":["toCharCode","character","charCodeAt","toCodePoint","codePointAt","toHexStringOfMinLength","num","minLength","toString","toUpperCase","toHexString","charFromCode","code","fromCharCode","charFromHexCode","hex","parseInt","padStart","value","length","padChar","padding","idx","len","copyStringIntoBuffer","str","buffer","offset","addRandomSuffix","prefix","suffixLength","Math","floor","random","escapeRegExp","replace","cleanText","text","escapedNewlineChars","newlineChars","isNewlineChar","test","lineSplit","split","mergeLines","charAtIndex","index","cuFirst","cuSecond","nextIndex","slice","charSplit","chars","c","cLen","push","buildWordBreakRegex","wordBreaks","newlineCharUnion","join","escapedRules","wordBreak","TypeError","breakRules","RegExp","breakTextIntoLines","maxWidth","computeWidthOfText","regex","words","match","currLine","currWidth","lines","pushCurrLine","word","width","dateRegex","parseDate","dateStr","undefined","_a","month","_b","day","_c","hours","_d","mins","_e","secs","_f","offsetSign","_g","offsetHours","_h","offsetMins","tzOffset","date","Date","year","findLastMatch","position","lastMatch","substring","pos"],"sourceRoot":"","sources":["../../src/utils/strings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}