{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Ascii85Stream class contained in this file is a TypeScript port of the\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar isSpace = function isSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n};\nvar Ascii85Stream = /** @class */function (_super) {\n  __extends(Ascii85Stream, _super);\n  function Ascii85Stream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.input = new Uint8Array(5);\n    // Most streams increase in size when decoded, but Ascii85 streams\n    // typically shrink by ~20%.\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n    return _this;\n  }\n  Ascii85Stream.prototype.readBlock = function () {\n    var TILDA_CHAR = 0x7e; // '~'\n    var Z_LOWER_CHAR = 0x7a; // 'z'\n    var EOF = -1;\n    var stream = this.stream;\n    var c = stream.getByte();\n    while (isSpace(c)) {\n      c = stream.getByte();\n    }\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n    var bufferLength = this.bufferLength;\n    var buffer;\n    var i;\n    // special code for z\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n      for (i = 1; i < 5; ++i) {\n        c = stream.getByte();\n        while (isSpace(c)) {\n          c = stream.getByte();\n        }\n        input[i] = c;\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n      // partial ending;\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n        this.eof = true;\n      }\n      var t = 0;\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n  return Ascii85Stream;\n}(DecodeStream);\nexport default Ascii85Stream;","map":{"version":3,"mappings":"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","names":["DecodeStream","isSpace","ch","__extends","stream","maybeLength","_super","_this","input","Uint8Array","Ascii85Stream","TILDA_CHAR","Z_LOWER_CHAR","EOF","c","getByte","eof","bufferLength","buffer","i","ensureBuffer","t"],"sourceRoot":"","sources":["../../../src/core/streams/Ascii85Stream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}