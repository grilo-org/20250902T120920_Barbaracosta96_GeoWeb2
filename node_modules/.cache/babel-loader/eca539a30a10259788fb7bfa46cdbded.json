{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedPage = /** @class */function () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this page after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * embeddedPage.width  // => 500\n   * embeddedPage.height // => 250\n   *\n   * const scaled = embeddedPage.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing a page with\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this page should be scaled.\n   * @returns The width and height of the page after being scaled.\n   */\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this page. For example:\n   * ```js\n   * const { width, height } = embeddedPage.size()\n   * ```\n   * @returns The width and height of the page.\n   */\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable pages get embedded.\n   *\n   * Embed this embeddable page in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedPage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPdf]] and\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\n   * > [[PDFEmbeddedPage]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this embedded page.\n   * @param doc The document to which the embedded page will belong.\n   * @param embedder The embedder that will be used to embed the page.\n   */\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n  return PDFEmbeddedPage;\n}();\nexport default PDFEmbeddedPage;","map":{"version":3,"mappings":";AACA,OAAOA,WAAW;AAClB,SAASC,eAAe,EAAEC,MAAM,QAAE;AAClC,SAASC,QAAQ,QAAE;AAEnB;;;AAGA;EA+BE,yBACEC,GAAW,EACXC,GAAgB,EAChBC,QAAyB;IANnB,oBAAe,GAAG,KAAK;IAQ7BH,QAAQ,CAACC,GAAG,EAAE,KAAK,EAAE,CAAC,CAACF,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC1CC,QAAQ,CAACE,GAAG,EAAE,KAAK,EAAE,CAAC,CAACL,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IACpDG,QAAQ,CAACG,QAAQ,EAAE,UAAU,EAAE,CAAC,CAACL,eAAe,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAEtE,IAAI,CAACG,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,KAAK,GAAGD,QAAQ,CAACC,KAAK;IAC3B,IAAI,CAACC,MAAM,GAAGF,QAAQ,CAACE,MAAM;IAE7B,IAAI,CAACF,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;;;;;;;;EAgBAG,+BAAK,GAAL,UAAMC,MAAc;IAClBP,QAAQ,CAACO,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IACtC,OAAO;MAAEH,KAAK,EAAE,IAAI,CAACA,KAAK,GAAGG,MAAM;MAAEF,MAAM,EAAE,IAAI,CAACA,MAAM,GAAGE;IAAM,CAAE;EACrE,CAAC;EAED;;;;;;;EAOAD,8BAAI,GAAJ;IACE,OAAO,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;EAED;;;;;;;;;EASMF,+BAAK,GAAX;;;;;iBACM,CAAC,IAAI,CAACG,eAAe,EAArB;YACF,qBAAM,IAAI,CAACN,QAAQ,CAACO,gBAAgB,CAAC,IAAI,CAACR,GAAG,CAACS,OAAO,EAAE,IAAI,CAACV,GAAG,CAAC;;YAAhEW,SAAgE;YAChE,IAAI,CAACH,eAAe,GAAG,IAAI;;;;;;;GAE9B;EA7FD;;;;;;;;;;;;EAYOH,kBAAE,GAAG,UAACL,GAAW,EAAEC,GAAgB,EAAEC,QAAyB;IACnE,WAAIG,eAAe,CAACL,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;EAAvC,CAAuC;EAiF3C,sBAAC;CAAA,EA/FD;eAAqBG,eAAe","names":["PDFDocument","PDFPageEmbedder","PDFRef","assertIs","ref","doc","embedder","width","height","PDFEmbeddedPage","factor","scale","alreadyEmbedded","embedIntoContext","context","_a"],"sourceRoot":"","sources":["../../src/api/PDFEmbeddedPage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}