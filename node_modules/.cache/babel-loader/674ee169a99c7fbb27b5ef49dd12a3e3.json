{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\n * Represents a field of a [[PDFForm]].\n *\n * This class is effectively abstract. All fields in a [[PDFForm]] will\n * actually be an instance of a subclass of this class.\n *\n * Note that each field in a PDF is represented by a single field object.\n * However, a given field object may be rendered at multiple locations within\n * the document (across one or more pages). The rendering of a field is\n * controlled by its widgets. Each widget causes its field to be displayed at a\n * particular location in the document.\n *\n * Most of the time each field in a PDF has only a single widget, and thus is\n * only rendered once. However, if a field is rendered multiple times, it will\n * have multiple widgets - one for each location it is rendered.\n *\n * This abstraction of field objects and widgets is defined in the PDF\n * specification and dictates how PDF files store fields and where they are\n * to be rendered.\n */\nvar PDFField = /** @class */function () {\n  function PDFField(acroField, ref, doc) {\n    assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroField = acroField;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\n   * Get the fully qualified name of this field. For example:\n   * ```js\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const name = field.getName()\n   *   console.log('Field name:', name)\n   * })\n   * ```\n   * Note that PDF fields are structured as a tree. Each field is the\n   * descendent of a series of ancestor nodes all the way up to the form node,\n   * which is always the root of the tree. Each node in the tree (except for\n   * the form node) has a partial name. Partial names can be composed of any\n   * unicode characters except a period (`.`). The fully qualified name of a\n   * field is composed of the partial names of all its ancestors joined\n   * with periods. This means that splitting the fully qualified name on\n   * periods and taking the last element of the resulting array will give you\n   * the partial name of a specific field.\n   * @returns The fully qualified name of this field.\n   */\n  PDFField.prototype.getName = function () {\n    var _a;\n    return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n  };\n  /**\n   * Returns `true` if this field is read only. This means that PDF readers\n   * will not allow users to interact with the field or change its value. See\n   * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isReadOnly()) console.log('Read only is enabled')\n   * ```\n   * @returns Whether or not this is a read only field.\n   */\n  PDFField.prototype.isReadOnly = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n  };\n  /**\n   * Prevent PDF readers from allowing users to interact with this field or\n   * change its value. The field will not respond to mouse or keyboard input.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableReadOnly()\n   * ```\n   * Useful for fields whose values are computed, imported from a database, or\n   * prefilled by software before being displayed to the user.\n   */\n  PDFField.prototype.enableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n  };\n  /**\n   * Allow users to interact with this field and change its value in PDF\n   * readers via mouse and keyboard input. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableReadOnly()\n   * ```\n   */\n  PDFField.prototype.disableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n  };\n  /**\n   * Returns `true` if this field must have a value when the form is submitted.\n   * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isRequired()) console.log('Field is required')\n   * ```\n   * @returns Whether or not this field is required.\n   */\n  PDFField.prototype.isRequired = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.Required);\n  };\n  /**\n   * Require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableRequired()\n   * ```\n   */\n  PDFField.prototype.enableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n  };\n  /**\n   * Do not require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableRequired()\n   * ```\n   */\n  PDFField.prototype.disableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n  };\n  /**\n   * Returns `true` if this field's value should be exported when the form is\n   * submitted. See [[PDFField.enableExporting]] and\n   * [[PDFField.disableExporting]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isExported()) console.log('Exporting is enabled')\n   * ```\n   * @returns Whether or not this field's value should be exported.\n   */\n  PDFField.prototype.isExported = function () {\n    return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n  };\n  /**\n   * Indicate that this field's value should be exported when the form is\n   * submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableExporting()\n   * ```\n   */\n  PDFField.prototype.enableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n  };\n  /**\n   * Indicate that this field's value should **not** be exported when the form\n   * is submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableExporting()\n   * ```\n   */\n  PDFField.prototype.disableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n  };\n  /** @ignore */\n  PDFField.prototype.needsAppearancesUpdate = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n  };\n  /** @ignore */\n  PDFField.prototype.defaultUpdateAppearances = function (_font) {\n    throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n  };\n  PDFField.prototype.markAsDirty = function () {\n    this.doc.getForm().markFieldAsDirty(this.ref);\n  };\n  PDFField.prototype.markAsClean = function () {\n    this.doc.getForm().markFieldAsClean(this.ref);\n  };\n  PDFField.prototype.isDirty = function () {\n    return this.doc.getForm().fieldIsDirty(this.ref);\n  };\n  PDFField.prototype.createWidget = function (options) {\n    var _a;\n    var textColor = options.textColor;\n    var backgroundColor = options.backgroundColor;\n    var borderColor = options.borderColor;\n    var borderWidth = options.borderWidth;\n    var degreesAngle = toDegrees(options.rotate);\n    var caption = options.caption;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width + borderWidth;\n    var height = options.height + borderWidth;\n    var hidden = Boolean(options.hidden);\n    var pageRef = options.page;\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    // Create a widget for this field\n    var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n    // Set widget properties\n    var rect = rotateRectangle({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, borderWidth, degreesAngle);\n    widget.setRectangle(rect);\n    if (pageRef) widget.setP(pageRef);\n    var ac = widget.getOrCreateAppearanceCharacteristics();\n    if (backgroundColor) {\n      ac.setBackgroundColor(colorToComponents(backgroundColor));\n    }\n    ac.setRotation(degreesAngle);\n    if (caption) ac.setCaptions({\n      normal: caption\n    });\n    if (borderColor) ac.setBorderColor(colorToComponents(borderColor));\n    var bs = widget.getOrCreateBorderStyle();\n    if (borderWidth !== undefined) bs.setWidth(borderWidth);\n    widget.setFlagTo(AnnotationFlags.Print, true);\n    widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n    widget.setFlagTo(AnnotationFlags.Invisible, false);\n    // Set acrofield properties\n    if (textColor) {\n      var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n      var newDa = da + '\\n' + setFillingColor(textColor).toString();\n      this.acroField.setDefaultAppearance(newDa);\n    }\n    return widget;\n  };\n  PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceStream(widget, normal, font),\n      rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n      down: down && this.createAppearanceStream(widget, down, font)\n    });\n  };\n  PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceDict(widget, normal, onValue),\n      rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n      down: down && this.createAppearanceDict(widget, down, onValue)\n    });\n  };\n  PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    widget.setNormalAppearance(normal);\n    if (rollover) {\n      widget.setRolloverAppearance(rollover);\n    } else {\n      widget.removeRolloverAppearance();\n    }\n    if (down) {\n      widget.setDownAppearance(down);\n    } else {\n      widget.removeDownAppearance();\n    }\n  };\n  // // TODO: Do we need to do this...?\n  // private foo(font: PDFFont, dict: PDFDict) {\n  //   if (!dict.lookup(PDFName.of('DR'))) {\n  //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n  //   }\n  //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n  //   if (!DR.lookup(PDFName.of('Font'))) {\n  //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n  //   }\n  //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n  //   Font.set(PDFName.of(font.name), font.ref);\n  // }\n  PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n    var _a;\n    var context = this.acroField.dict.context;\n    var _b = widget.getRectangle(),\n      width = _b.width,\n      height = _b.height;\n    // TODO: Do we need to do this...?\n    // if (font) {\n    //   this.foo(font, widget.dict);\n    //   this.foo(font, this.doc.getForm().acroForm.dict);\n    // }\n    // END TODO\n    var Resources = font && {\n      Font: (_a = {}, _a[font.name] = font.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, width, height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    var streamRef = context.register(stream);\n    return streamRef;\n  };\n  /**\n   * Create a FormXObject of the supplied image and add it to context.\n   * The FormXObject size is calculated based on the widget (including\n   * the alignment).\n   * @param widget The widget that should display the image.\n   * @param alignment The alignment of the image.\n   * @param image The image that should be displayed.\n   * @returns The ref for the FormXObject that was added to the context.\n   */\n  PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n    // NOTE: This implementation doesn't handle image borders.\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n    //       ratio) to fit perfectly within the widget's rectangle. This method\n    //       does not currently do that. Should there be an option for that?\n    var _a;\n    var _b;\n    var context = this.acroField.dict.context;\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n      rotation: rotation\n    }));\n    var adj = adjustDimsForRotation(rectangle, rotation);\n    var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n    // Support borders on images and maybe other properties\n    var options = {\n      x: borderWidth,\n      y: borderWidth,\n      width: imageDims.width,\n      height: imageDims.height,\n      //\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    };\n    if (alignment === ImageAlignment.Center) {\n      options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n      options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n    } else if (alignment === ImageAlignment.Right) {\n      options.x = adj.width - borderWidth - imageDims.width;\n      options.y = adj.height - borderWidth - imageDims.height;\n    }\n    var imageName = this.doc.context.addRandomSuffix('Image', 10);\n    var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n    ////////////\n    var Resources = {\n      XObject: (_a = {}, _a[imageName] = image.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    return context.register(stream);\n  };\n  PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n    var context = this.acroField.dict.context;\n    var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n    var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n    var appearanceDict = context.obj({});\n    appearanceDict.set(onValue, onStreamRef);\n    appearanceDict.set(PDFName.of('Off'), offStreamRef);\n    return appearanceDict;\n  };\n  return PDFField;\n}();\nexport default PDFField;","map":{"version":3,"mappings":"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","names":["PDFDocument","colorToComponents","setFillingColor","toDegrees","rotateRectangle","reduceRotation","adjustDimsForRotation","degrees","PDFRef","PDFWidgetAnnotation","PDFName","MethodNotImplementedError","AcroFieldFlags","PDFAcroTerminal","AnnotationFlags","assertIs","assertMultiple","assertOrUndefined","ImageAlignment","drawImage","rotateInPlace","assertFieldAppearanceOptions","options","x","y","width","height","textColor","Object","backgroundColor","borderColor","borderWidth","rotate","acroField","ref","doc","PDFField","getFullyQualifiedName","hasFlag","ReadOnly","setFlagTo","Required","NoExport","constructor","name","_font","getForm","markFieldAsDirty","markFieldAsClean","fieldIsDirty","degreesAngle","caption","hidden","Boolean","pageRef","page","widget","create","context","rect","setRectangle","setP","ac","getOrCreateAppearanceCharacteristics","setBackgroundColor","setRotation","setCaptions","normal","setBorderColor","bs","getOrCreateBorderStyle","undefined","setWidth","Print","Hidden","Invisible","da","getDefaultAppearance","newDa","toString","setDefaultAppearance","font","_a","rollover","down","updateWidgetAppearances","createAppearanceStream","onValue","createAppearanceDict","setNormalAppearance","setRolloverAppearance","removeRolloverAppearance","setDownAppearance","removeDownAppearance","appearance","dict","getRectangle","Resources","Font","stream","formXObject","BBox","obj","Matrix","streamRef","register","image","alignment","rectangle","ap","getAppearanceCharacteristics","getBorderStyle","getWidth","rotation","getRotation","adj","imageDims","scaleToFit","xSkew","ySkew","Center","Right","imageName","addRandomSuffix","XObject","onStreamRef","on","offStreamRef","off","appearanceDict","set","of"],"sourceRoot":"","sources":["../../../src/api/form/PDFField.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}