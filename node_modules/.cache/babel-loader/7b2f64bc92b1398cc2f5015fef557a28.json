{"ast":null,"code":"import { MethodNotImplementedError } from \"../errors\";\nimport Stream from \"./Stream\";\n/*\n * Copyright 2012 Mozilla Foundation\n *\n * The DecodeStream class contained in this file is a TypeScript port of the\n * JavaScript DecodeStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\n// Lots of DecodeStreams are created whose buffers are never used.  For these\n// we share a single empty buffer. This is (a) space-efficient and (b) avoids\n// having special cases that would be required if we used |null| for an empty\n// buffer.\nvar emptyBuffer = new Uint8Array(0);\n/**\n * Super class for the decoding streams\n */\nvar DecodeStream = /** @class */function () {\n  function DecodeStream(maybeMinBufferLength) {\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n    if (maybeMinBufferLength) {\n      // Compute the first power of two that is as big as maybeMinBufferLength.\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n  Object.defineProperty(DecodeStream.prototype, \"isEmpty\", {\n    get: function get() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n      return this.bufferLength === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DecodeStream.prototype.getByte = function () {\n    var pos = this.pos;\n    while (this.bufferLength <= pos) {\n      if (this.eof) {\n        return -1;\n      }\n      this.readBlock();\n    }\n    return this.buffer[this.pos++];\n  };\n  DecodeStream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  };\n  DecodeStream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  };\n  DecodeStream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var end;\n    var pos = this.pos;\n    if (length) {\n      this.ensureBuffer(pos + length);\n      end = pos + length;\n      while (!this.eof && this.bufferLength < end) {\n        this.readBlock();\n      }\n      var bufEnd = this.bufferLength;\n      if (end > bufEnd) {\n        end = bufEnd;\n      }\n    } else {\n      while (!this.eof) {\n        this.readBlock();\n      }\n      end = this.bufferLength;\n    }\n    this.pos = end;\n    var subarray = this.buffer.subarray(pos, end);\n    // `this.buffer` is either a `Uint8Array` or `Uint8ClampedArray` here.\n    return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n  };\n  DecodeStream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n  DecodeStream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n  DecodeStream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  };\n  DecodeStream.prototype.reset = function () {\n    this.pos = 0;\n  };\n  DecodeStream.prototype.makeSubStream = function (start, length /* dict */) {\n    var end = start + length;\n    while (this.bufferLength <= end && !this.eof) {\n      this.readBlock();\n    }\n    return new Stream(this.buffer, start, length /* dict */);\n  };\n\n  DecodeStream.prototype.decode = function () {\n    while (!this.eof) {\n      this.readBlock();\n    }\n    return this.buffer.subarray(0, this.bufferLength);\n  };\n  DecodeStream.prototype.readBlock = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'readBlock');\n  };\n  DecodeStream.prototype.ensureBuffer = function (requested) {\n    var buffer = this.buffer;\n    if (requested <= buffer.byteLength) {\n      return buffer;\n    }\n    var size = this.minBufferLength;\n    while (size < requested) {\n      size *= 2;\n    }\n    var buffer2 = new Uint8Array(size);\n    buffer2.set(buffer);\n    return this.buffer = buffer2;\n  };\n  return DecodeStream;\n}();\nexport default DecodeStream;","map":{"version":3,"mappings":"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","names":["MethodNotImplementedError","Stream","emptyBuffer","Uint8Array","maybeMinBufferLength","pos","bufferLength","eof","buffer","minBufferLength","Object","DecodeStream","readBlock","b0","getByte","b1","b2","b3","length","forceClamped","end","ensureBuffer","bufEnd","subarray","Uint8ClampedArray","peekedByte","bytes","getBytes","n","start","constructor","name","requested","byteLength","size","buffer2","set"],"sourceRoot":"","sources":["../../../src/core/streams/DecodeStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}