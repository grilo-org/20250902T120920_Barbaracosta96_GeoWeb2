{"ast":null,"code":"import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n  if (rawValue === undefined) return undefined;\n  return enumType[rawValue];\n};\nexport var NonFullScreenPageMode;\n(function (NonFullScreenPageMode) {\n  /**\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\n   * images should be visible.\n   */\n  NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n  /** After exiting FullScreen mode, the document outline should be visible. */\n  NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\n  NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n  /**\n   * After exiting FullScreen mode, the optional content group panel should be\n   * visible.\n   */\n  NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\nexport var ReadingDirection;\n(function (ReadingDirection) {\n  /** The predominant reading order is Left to Right. */\n  ReadingDirection[\"L2R\"] = \"L2R\";\n  /**\n   * The predominant reading order is Right to left (including vertical writing\n   * systems, such as Chinese, Japanese and Korean).\n   */\n  ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\nexport var PrintScaling;\n(function (PrintScaling) {\n  /** No page scaling. */\n  PrintScaling[\"None\"] = \"None\";\n  /* Use the PDF reader's default print scaling. */\n  PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\nexport var Duplex;\n(function (Duplex) {\n  /** The PDF reader should print single-sided. */\n  Duplex[\"Simplex\"] = \"Simplex\";\n  /**\n   * The PDF reader should print double sided and flip on the short edge of the\n   * sheet.\n   */\n  Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n  /**\n   * The PDF reader should print double sided and flip on the long edge of the\n   * sheet.\n   */\n  Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\nvar ViewerPreferences = /** @class */function () {\n  /** @ignore */\n  function ViewerPreferences(dict) {\n    this.dict = dict;\n  }\n  ViewerPreferences.prototype.lookupBool = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFBool) return returnObj;\n    return undefined;\n  };\n  ViewerPreferences.prototype.lookupName = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFName) return returnObj;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideToolbar = function () {\n    return this.lookupBool('HideToolbar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideMenubar = function () {\n    return this.lookupBool('HideMenubar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideWindowUI = function () {\n    return this.lookupBool('HideWindowUI');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.FitWindow = function () {\n    return this.lookupBool('FitWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.CenterWindow = function () {\n    return this.lookupBool('CenterWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.DisplayDocTitle = function () {\n    return this.lookupBool('DisplayDocTitle');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n    return this.lookupName('NonFullScreenPageMode');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Direction = function () {\n    return this.lookupName('Direction');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintScaling = function () {\n    return this.lookupName('PrintScaling');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Duplex = function () {\n    return this.lookupName('Duplex');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n    return this.lookupBool('PickTrayByPDFSize');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintPageRange = function () {\n    var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NumCopies = function () {\n    var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n    if (NumCopies instanceof PDFNumber) return NumCopies;\n    return undefined;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\n   * this document.\n   * @returns Whether or not toolbars should be hidden.\n   */\n  ViewerPreferences.prototype.getHideToolbar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\n   * document.\n   * @returns Whether or not the menu bar should be hidden.\n   */\n  ViewerPreferences.prototype.getHideMenubar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the user interface elements in\n   * the document's window (such as scroll bars and navigation controls),\n   * leaving only the document's contents displayed.\n   * @returns Whether or not user interface elements should be hidden.\n   */\n  ViewerPreferences.prototype.getHideWindowUI = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should resize the document's window to fit\n   * the size of the first displayed page.\n   * @returns Whether or not the window should be resized to fit.\n   */\n  ViewerPreferences.prototype.getFitWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should position the document's window in the\n   * center of the screen.\n   * @returns Whether or not to center the document window.\n   */\n  ViewerPreferences.prototype.getCenterWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if the window's title bar should display the document\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n   * Returns `false` if the title bar should instead display the filename of the\n   * PDF file.\n   * @returns Whether to display the document title.\n   */\n  ViewerPreferences.prototype.getDisplayDocTitle = function () {\n    var _a, _b;\n    return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns the page mode, which tells the PDF reader how to display the\n   * document after exiting full-screen mode.\n   * @returns The page mode after exiting full-screen mode.\n   */\n  ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n    var _a, _b;\n    var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n  };\n  /**\n   * Returns the predominant reading order for text.\n   * @returns The text reading order.\n   */\n  ViewerPreferences.prototype.getReadingDirection = function () {\n    var _a, _b;\n    var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n  };\n  /**\n   * Returns the page scaling option that the PDF reader should select when the\n   * print dialog is displayed.\n   * @returns The page scaling option.\n   */\n  ViewerPreferences.prototype.getPrintScaling = function () {\n    var _a, _b;\n    var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n  };\n  /**\n   * Returns the paper handling option that should be used when printing the\n   * file from the print dialog.\n   * @returns The paper handling option.\n   */\n  ViewerPreferences.prototype.getDuplex = function () {\n    var _a;\n    var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return asEnum(duplex, Duplex);\n  };\n  /**\n   * Returns `true` if the PDF page size should be used to select the input\n   * paper tray.\n   * @returns Whether or not the PDF page size should be used to select the\n   *          input paper tray.\n   */\n  ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n    var _a;\n    return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n  };\n  /**\n   * Returns an array of page number ranges, which are the values used to\n   * initialize the print dialog box when the file is printed. Each range\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\n   * pages to be printed. The first page of the PDF file is denoted by 0.\n   * For example:\n   * ```js\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * const includesPage3 = viewerPrefs\n   *   .getPrintRanges()\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\n   * if (includesPage3) console.log('printRange includes page 3')\n   * ```\n   * @returns An array of objects, each with the properties `start` and `end`,\n   *          denoting page indices. If not, specified an empty array is\n   *          returned.\n   */\n  ViewerPreferences.prototype.getPrintPageRange = function () {\n    var rng = this.PrintPageRange();\n    if (!rng) return [];\n    var pageRanges = [];\n    for (var i = 0; i < rng.size(); i += 2) {\n      // Despite the spec clearly stating that \"The first page of the PDF file\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n      // actually a 0 based index.\n      var start = rng.lookup(i, PDFNumber).asNumber();\n      var end = rng.lookup(i + 1, PDFNumber).asNumber();\n      pageRanges.push({\n        start: start,\n        end: end\n      });\n    }\n    return pageRanges;\n  };\n  /**\n   * Returns the number of copies to be printed when the print dialog is opened\n   * for this document.\n   * @returns The default number of copies to be printed.\n   */\n  ViewerPreferences.prototype.getNumCopies = function () {\n    var _a, _b;\n    return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n  };\n  /**\n   * Choose whether the PDF reader's toolbars should be hidden while the\n   * document is active.\n   * @param hideToolbar `true` if the toolbar should be hidden.\n   */\n  ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n    var HideToolbar = this.dict.context.obj(hideToolbar);\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n  };\n  /**\n   * Choose whether the PDF reader's menu bar should be hidden while the\n   * document is active.\n   * @param hideMenubar `true` if the menu bar should be hidden.\n   */\n  ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n    var HideMenubar = this.dict.context.obj(hideMenubar);\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n  };\n  /**\n   * Choose whether the PDF reader should hide user interface elements in the\n   * document's window (such as scroll bars and navigation controls), leaving\n   * only the document's contents displayed.\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\n   */\n  ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n    var HideWindowUI = this.dict.context.obj(hideWindowUI);\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n  };\n  /**\n   * Choose whether the PDF reader should resize the document's window to fit\n   * the size of the first displayed page.\n   * @param fitWindow `true` if the window should be resized.\n   */\n  ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n    var FitWindow = this.dict.context.obj(fitWindow);\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\n  };\n  /**\n   * Choose whether the PDF reader should position the document's window in the\n   * center of the screen.\n   * @param centerWindow `true` if the window should be centered.\n   */\n  ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n    var CenterWindow = this.dict.context.obj(centerWindow);\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n  };\n  /**\n   * Choose whether the window's title bar should display the document `Title`\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n   * `false`, the title bar should instead display the PDF filename.\n   * @param displayTitle `true` if the document title should be displayed.\n   */\n  ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n    var DisplayDocTitle = this.dict.context.obj(displayTitle);\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n  };\n  /**\n   * Choose how the PDF reader should display the document upon exiting\n   * full-screen mode. This entry is meaningful only if the value of the\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   *\n   * // Set the PageMode\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n   *\n   * // Set what happens when full-screen is closed\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n   * ```\n   *\n   * @param nonFullScreenPageMode How the document should be displayed upon\n   *                              exiting full screen mode.\n   */\n  ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n    assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n    var mode = PDFName.of(nonFullScreenPageMode);\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n  };\n  /**\n   * Choose the predominant reading order for text.\n   *\n   * This entry has no direct effect on the document's contents or page\n   * numbering, but may be used to determine the relative positioning of pages\n   * when displayed side by side or printed n-up.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n   * ```\n   *\n   * @param readingDirection The reading order for text.\n   */\n  ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n    var direction = PDFName.of(readingDirection);\n    this.dict.set(PDFName.of('Direction'), direction);\n  };\n  /**\n   * Choose the page scaling option that should be selected when a print dialog\n   * is displayed for this document.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\n   * ```\n   *\n   * @param printScaling The print scaling option.\n   */\n  ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n    var scaling = PDFName.of(printScaling);\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\n  };\n  /**\n   * Choose the paper handling option that should be selected by default in the\n   * print dialog.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, Duplex } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n   * ```\n   *\n   * @param duplex The double or single sided printing option.\n   */\n  ViewerPreferences.prototype.setDuplex = function (duplex) {\n    assertIsOneOf(duplex, 'duplex', Duplex);\n    var dup = PDFName.of(duplex);\n    this.dict.set(PDFName.of('Duplex'), dup);\n  };\n  /**\n   * Choose whether the PDF document's page size should be used to select the\n   * input paper tray when printing. This setting influences only the preset\n   * values used to populate the print dialog presented by a PDF reader.\n   *\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\n   * with input paper tray should be checked. This setting has no effect on\n   * operating systems that do not provide the ability to pick the input tray\n   * by size.\n   *\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\n   *                          to select the input paper tray.\n   */\n  ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n    var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n  };\n  /**\n   * Choose the page numbers used to initialize the print dialog box when the\n   * file is printed. The first page of the PDF file is denoted by 0.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   *\n   * // We can set the default print range to only the first page\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n   *\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n   * viewerPrefs.setPrintPageRange([\n   *   { start: 0, end: 0 },\n   *   { start: 2, end: 2 },\n   *   { start: 4, end: 6 },\n   * ])\n   * ```\n   *\n   * @param printPageRange An object or array of objects, each with the\n   *                       properties `start` and `end`, denoting a range of\n   *                       page indices.\n   */\n  ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\n    var flatRange = [];\n    for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n      flatRange.push(printPageRange[idx].start);\n      flatRange.push(printPageRange[idx].end);\n    }\n    assertEachIs(flatRange, 'printPageRange', ['number']);\n    var pageRanges = this.dict.context.obj(flatRange);\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n  };\n  /**\n   * Choose the default number of copies to be printed when the print dialog is\n   * opened for this file.\n   * @param numCopies The default number of copies.\n   */\n  ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n    assertInteger(numCopies, 'numCopies');\n    var NumCopies = this.dict.context.obj(numCopies);\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\n  };\n  /** @ignore */\n  ViewerPreferences.fromDict = function (dict) {\n    return new ViewerPreferences(dict);\n  };\n  /** @ignore */\n  ViewerPreferences.create = function (context) {\n    var dict = context.obj({});\n    return new ViewerPreferences(dict);\n  };\n  return ViewerPreferences;\n}();\nexport default ViewerPreferences;","map":{"version":3,"mappings":"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","names":["PDFArray","PDFBool","PDFName","PDFNumber","assertEachIs","assertInteger","assertIsOneOf","assertRange","asEnum","rawValue","enumType","undefined","NonFullScreenPageMode","ReadingDirection","PrintScaling","Duplex","dict","ViewerPreferences","key","returnObj","lookup","of","lookupBool","lookupName","PrintPageRange","NumCopies","HideToolbar","asBoolean","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","mode","decodeText","UseNone","direction","Direction","L2R","scaling","AppDefault","duplex","PickTrayByPDFSize","rng","pageRanges","i","size","start","asNumber","end","push","hideToolbar","context","obj","set","hideMenubar","hideWindowUI","fitWindow","centerWindow","displayTitle","nonFullScreenPageMode","readingDirection","printScaling","dup","pickTrayByPDFSize","printPageRange","Array","isArray","flatRange","idx","len","length","numCopies","Number","MAX_VALUE"],"sourceRoot":"","sources":["../../../src/core/interactive/ViewerPreferences.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}