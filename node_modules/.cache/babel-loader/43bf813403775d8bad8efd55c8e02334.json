{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */function () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n   * fields do not use XFA as it is not widely supported by PDF readers.\n   *\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\n   * > fields.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * if (form.hasXFA()) console.log('PDF has XFA data')\n   * ```\n   * @returns Whether or not this form has XFA data.\n   */\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n   * force readers to fallback to standard fields if the [[PDFDocument]]\n   * contains any. For example:\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * form.deleteXFA()\n   * ```\n   */\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\n   * Get all fields contained in this [[PDFForm]]. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const type = field.constructor.name\n   *   const name = field.getName()\n   *   console.log(`${type}: ${name}`)\n   * })\n   * ```\n   * @returns An array of all fields in this form.\n   */\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n        acroField = _a[0],\n        ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n    return fields;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n   * if (field) console.log('Field exists!')\n   * ```\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name, if one exists.\n   */\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('Page1.Foo.Bar[0]')\n   * ```\n   * If no field exists with the provided name, an error will be thrown.\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name.\n   */\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\n   * Get the button field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const button = form.getButton('Page1.Foo.Button[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a button.\n   * @param name A fully qualified button name.\n   * @returns The button with the specified name.\n   */\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\n   * Get the check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n   * checkBox.check()\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a check box.\n   * @param name A fully qualified check box name.\n   * @returns The check box with the specified name.\n   */\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\n   * Get the dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n   * const options = dropdown.getOptions()\n   * dropdown.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a dropdown.\n   * @param name A fully qualified dropdown name.\n   * @returns The dropdown with the specified name.\n   */\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\n   * Get the option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n   * const options = optionList.getOptions()\n   * optionList.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not an option list.\n   * @param name A fully qualified option list name.\n   * @returns The option list with the specified name.\n   */\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\n   * Get the radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n   * const options = radioGroup.getOptions()\n   * radioGroup.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a radio group.\n   * @param name A fully qualified radio group name.\n   * @returns The radio group with the specified name.\n   */\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\n   * Get the signature field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a signature.\n   * @param name A fully qualified signature name.\n   * @returns The signature with the specified name.\n   */\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\n   * Get the text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\n   * textField.setText('Are you designed to act or to be acted upon?')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a text field.\n   * @param name A fully qualified text field name.\n   * @returns The text field with the specified name.\n   */\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\n   * Create a new button field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('cool.new.button')\n   *\n   * button.addToPage('Do Stuff', font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new button.\n   * @returns The new button field.\n   */\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\n   * Create a new check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\n   *\n   * checkBox.addToPage(page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new check box.\n   * @returns The new check box field.\n   */\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('cool.new.dropdown')\n   *\n   * dropdown.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new dropdown.\n   * @returns The new dropdown field.\n   */\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\n   * Create a new option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('cool.new.optionList')\n   *\n   * optionList.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new option list.\n   * @returns The new option list field.\n   */\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\n   * Create a new radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n   *\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\n   * Create a new text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('cool.new.textField')\n   *\n   * textField.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\n   * Flatten all fields in this [[PDFForm]].\n   *\n   * Flattening a form field will take the current appearance for each of that\n   * field's widgets and make them part of their page's content stream. All form\n   * fields and annotations associated are then removed. Note that once a form\n   * has been flattened its fields can no longer be accessed or edited.\n   *\n   * This operation is often used after filling form fields to ensure a\n   * consistent appearance across different PDF readers and/or printers.\n   * Another common use case is to copy a template document with form fields\n   * into another document. In this scenario you would load the template\n   * document, fill its fields, flatten it, and then copy its pages into the\n   * recipient document - the filled fields will be copied over.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * form.flatten();\n   * ```\n   */\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n    var fields = this.getFields();\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n        var rectangle = widget.getRectangle();\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n        page.pushOperators.apply(page, operators);\n      }\n      this.removeField(field);\n    }\n  };\n  /**\n   * Remove a field from this [[PDFForm]].\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\n   * form.removeField(ageField);\n   * ```\n   */\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    var fieldKids = field.acroField.normalizedEntries().Kids;\n    var kidsCount = fieldKids.size();\n    for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n      var child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  };\n  /**\n   * Update the appearance streams for all widgets of all fields in this\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\n   * does not have any existing appearance streams, or the field's value has\n   * changed (e.g. by calling [[PDFTextField.setText]] or\n   * [[PDFDropdown.select]]).\n   *\n   * For example:\n   * ```js\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n   * const form = pdfDoc.getForm()\n   * form.updateFieldAppearances(courier)\n   * ```\n   *\n   * **IMPORTANT:** The default value for the `font` parameter is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if any fields contain text with\n   * characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing that as the `font`\n   * parameter allows you to generate appearance streams with non WinAnsi\n   * characters (assuming your custom font supports them).\n   *\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n   * > update appearances automatically if a form was accessed via the\n   * > [[PDFDocument.getForm]] method prior to saving.\n   *\n   * @param font Optionally, the font to use when creating new appearances.\n   */\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsDirty(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to not be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsClean(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\n   * Returns `true` is the specified field has been marked as dirty.\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n   * ```\n   * @param fieldRef The reference to the field that should be checked.\n   * @returns Whether or not the specified field is dirty.\n   */\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n    return page;\n  };\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n    var refOrDict = widget.getNormalAppearance();\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n    return refOrDict;\n  };\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n        parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  };\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n        field = _a[0],\n        ref = _a[1];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n    return undefined;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\n   * > instance of [[PDFForm]] for you.\n   *\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n   *\n   * @param acroForm The underlying `PDFAcroForm` for this form.\n   * @param doc The document to which the form will belong.\n   */\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n  return PDFForm;\n}();\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n  var parts = fullyQualifiedName.split('.');\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n    parentRef = _a[1];\n  var field = _b[0],\n    fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};","map":{"version":3,"mappings":"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","names":["PDFDocument","PDFButton","PDFCheckBox","PDFDropdown","PDFOptionList","PDFRadioGroup","PDFSignature","PDFTextField","NoSuchFieldError","UnexpectedFieldTypeError","FieldAlreadyExistsError","InvalidFieldNamePartError","PDFFont","StandardFonts","rotateInPlace","drawObject","popGraphicsState","pushGraphicsState","translate","PDFAcroForm","PDFAcroCheckBox","PDFAcroComboBox","PDFAcroListBox","PDFAcroRadioButton","PDFAcroSignature","PDFAcroText","PDFAcroPushButton","PDFAcroNonTerminal","PDFDict","PDFRef","createPDFAcroFields","PDFName","assertIs","Cache","assertOrUndefined","acroForm","doc","embedStandardFont","Helvetica","dirtyFields","Set","defaultFontCache","populatedBy","embedDefaultFont","PDFForm","dict","has","of","delete","allFields","getAllFields","fields","idx","len","length","acroField","ref","field","convertToPDFField","push","name","getFields","getName","undefined","getFieldMaybe","getField","nameParts","splitFieldName","parent","findOrCreateNonTerminals","nonTerminal","button","create","context","setPartialName","terminal","addFieldToParent","checkBox","comboBox","listBox","radioButton","text","options","updateFieldAppearances","i","lenFields","widgets","getWidgets","j","lenWidgets","widget","page","findWidgetPage","widgetRef","findWidgetAppearanceRef","xObjectKey","node","newXObject","rectangle","getRectangle","operators","__spreadArrays","x","y","rotation","filter","Boolean","pushOperators","removeField","pages","add","removeAnnot","forEach","fieldKids","normalizedEntries","Kids","kidsCount","size","childIndex","child","get","font","getDefaultFont","needsAppearancesUpdate","defaultUpdateAppearances","fieldRef","access","pageRef","P","getPages","find","getObjectRef","Error","findPageForAnnotationRef","refOrDict","getNormalAppearance","value","getValue","name_1","partialNames","namePart","parentRef","res","findNonTerminal","parent_1","setParent","nodeRef","register","addField","partialName","getPartialName","fullyQualifiedName","parts","split","slice","_a","_b","entries","Fields"],"sourceRoot":"","sources":["../../../src/api/form/PDFForm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}