{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { CustomFontEmbedder, PDFRef, StandardFontEmbedder } from \"../core\";\nimport { assertIs, assertOrUndefined } from \"../utils\";\n/**\n * Represents a font that has been embedded in a [[PDFDocument]].\n */\nvar PDFFont = /** @class */function () {\n  function PDFFont(ref, doc, embedder) {\n    this.modified = true;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[CustomFontEmbedder, 'CustomFontEmbedder'], [StandardFontEmbedder, 'StandardFontEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.name = embedder.fontName;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFPage.drawText]] method will automatically encode the text it is\n   * > given.\n   *\n   * Encodes a string of text in this font.\n   *\n   * @param text The text to be encoded.\n   * @returns The encoded text as a hex string.\n   */\n  PDFFont.prototype.encodeText = function (text) {\n    assertIs(text, 'text', ['string']);\n    this.modified = true;\n    return this.embedder.encodeText(text);\n  };\n  /**\n   * Measure the width of a string of text drawn in this font at a given size.\n   * For example:\n   * ```js\n   * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n   * ```\n   * @param text The string of text to be measured.\n   * @param size The font size to be used for this measurement.\n   * @returns The width of the string of text when drawn in this font at the\n   *          given size.\n   */\n  PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n    assertIs(text, 'text', ['string']);\n    assertIs(size, 'size', ['number']);\n    return this.embedder.widthOfTextAtSize(text, size);\n  };\n  /**\n   * Measure the height of this font at a given size. For example:\n   * ```js\n   * const height = font.heightAtSize(24)\n   * ```\n   *\n   * The `options.descender` value controls whether or not the font's\n   * descender is included in the height calculation.\n   *\n   * @param size The font size to be used for this measurement.\n   * @param options The options to be used when computing this measurement.\n   * @returns The height of this font at the given size.\n   */\n  PDFFont.prototype.heightAtSize = function (size, options) {\n    var _a;\n    assertIs(size, 'size', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n    return this.embedder.heightOfFontAtSize(size, {\n      descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true\n    });\n  };\n  /**\n   * Compute the font size at which this font is a given height. For example:\n   * ```js\n   * const fontSize = font.sizeAtHeight(12)\n   * ```\n   * @param height The height to be used for this calculation.\n   * @returns The font size at which this font is the given height.\n   */\n  PDFFont.prototype.sizeAtHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    return this.embedder.sizeOfFontAtHeight(height);\n  };\n  /**\n   * Get the set of unicode code points that can be represented by this font.\n   * @returns The set of unicode code points supported by this font.\n   */\n  PDFFont.prototype.getCharacterSet = function () {\n    if (this.embedder instanceof StandardFontEmbedder) {\n      return this.embedder.encoding.supportedCodePoints;\n    } else {\n      return this.embedder.font.characterSet;\n    }\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all fonts get embedded.\n   *\n   * Embed this font in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFFont.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.modified) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.modified = false;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedFont]] and\n   * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n   * > of [[PDFFont]] for you.\n   *\n   * Create an instance of [[PDFFont]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this font.\n   * @param doc The document to which the font will belong.\n   * @param embedder The embedder that will be used to embed the font.\n   */\n  PDFFont.of = function (ref, doc, embedder) {\n    return new PDFFont(ref, doc, embedder);\n  };\n  return PDFFont;\n}();\nexport default PDFFont;","map":{"version":3,"mappings":"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","names":["PDFDocument","CustomFontEmbedder","PDFRef","StandardFontEmbedder","assertIs","assertOrUndefined","ref","doc","embedder","name","fontName","PDFFont","text","modified","encodeText","size","widthOfTextAtSize","options","descender","heightOfFontAtSize","height","sizeOfFontAtHeight","encoding","supportedCodePoints","font","characterSet","embedIntoContext","context","_a"],"sourceRoot":"","sources":["../../src/api/PDFFont.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}