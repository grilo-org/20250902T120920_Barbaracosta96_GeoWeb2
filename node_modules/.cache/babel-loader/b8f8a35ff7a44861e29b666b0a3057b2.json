{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontSubsetEmbedder = /** @class */function (_super) {\n  __extends(CustomFontSubsetEmbedder, _super);\n  function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n    var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n    _this.subset = _this.font.createSubset();\n    _this.glyphs = [];\n    _this.glyphCache = Cache.populatedBy(function () {\n      return _this.glyphs;\n    });\n    _this.glyphIdMap = new Map();\n    return _this;\n  }\n  CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n        }\n      });\n    });\n  };\n  CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var glyph = glyphs[idx];\n      var subsetGlyphId = this.subset.includeGlyph(glyph);\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n    this.glyphCache.invalidate();\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  CustomFontSubsetEmbedder.prototype.isCFF = function () {\n    return this.subset.cff;\n  };\n  CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n  };\n  CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var parts = [];\n      _this.subset.encodeStream().on('data', function (bytes) {\n        return parts.push(bytes);\n      }).on('end', function () {\n        return resolve(mergeUint8Arrays(parts));\n      }).on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n  return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder);\nexport default CustomFontSubsetEmbedder;","map":{"version":3,"mappings":"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","names":["CustomFontEmbedder","PDFHexString","Cache","mergeUint8Arrays","toHexStringOfMinLength","__extends","font","fontData","customFontName","fontFeatures","_super","_this","subset","createSubset","glyphs","glyphCache","populatedBy","glyphIdMap","Map","CustomFontSubsetEmbedder","fontkit","create","_a","text","layout","hexCodes","Array","length","idx","len","glyph","subsetGlyphId","includeGlyph","set","id","invalidate","of","join","cff","get","Promise","resolve","reject","parts","encodeStream","on","bytes","push","err"],"sourceRoot":"","sources":["../../../src/core/embedders/CustomFontSubsetEmbedder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}