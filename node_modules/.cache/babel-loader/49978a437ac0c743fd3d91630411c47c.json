{"ast":null,"code":"import { toHexString, toHexStringOfMinLength } from \"../../utils\";\nimport { hasSurrogates, highSurrogate, isWithinBMP, lowSurrogate } from \"../../utils/unicode\";\n/** `glyphs` should be an array of unique glyphs */\nexport var createCmap = function createCmap(glyphs, glyphId) {\n  var bfChars = new Array(glyphs.length);\n  for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n    var glyph = glyphs[idx];\n    var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n    var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n    bfChars[idx] = [id, unicode];\n  }\n  return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\nvar fillCmapTemplate = function fillCmapTemplate(bfChars) {\n  return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0],\n      codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n  }).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n};\n/* =============================== Utilities ================================ */\nvar cmapHexFormat = function cmapHexFormat() {\n  var values = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n  return \"<\" + values.join('') + \">\";\n};\nvar cmapHexString = function cmapHexString(value) {\n  return toHexStringOfMinLength(value, 4);\n};\nvar cmapCodePointFormat = function cmapCodePointFormat(codePoint) {\n  if (isWithinBMP(codePoint)) return cmapHexString(codePoint);\n  if (hasSurrogates(codePoint)) {\n    var hs = highSurrogate(codePoint);\n    var ls = lowSurrogate(codePoint);\n    return \"\" + cmapHexString(hs) + cmapHexString(ls);\n  }\n  var hex = toHexString(codePoint);\n  var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n  throw new Error(msg);\n};","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,EAAEC,sBAAsB,QAAE;AAC9C,SACEC,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,YAAY,QACb;AAKD;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIC,MAAe,EAAEC,OAA8B;EACxE,IAAMC,OAAO,GAAa,IAAIC,KAAK,CAACH,MAAM,CAACI,MAAM,CAAC;EAClD,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGN,MAAM,CAACI,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;IACvD,IAAME,KAAK,GAAGP,MAAM,CAACK,GAAG,CAAC;IACzB,IAAMG,EAAE,GAAGC,aAAa,CAACC,aAAa,CAACT,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC;IACvD,IAAMI,OAAO,GAAGF,aAAa,eAAIF,KAAK,CAACK,UAAU,CAACC,GAAG,CAACC,mBAAmB,CAAC,CAAC;IAC3EZ,OAAO,CAACG,GAAG,CAAC,GAAG,CAACG,EAAE,EAAEG,OAAO,CAAC;;EAG9B,OAAOI,gBAAgB,CAACb,OAAO,CAAC;AAClC,CAAC;AAED;AAEA,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIb,OAAiB;EAAK,4QAc9CA,OAAO,CAACE,MAAM,sBACdF,OAAO,CAACW,GAAG,CAAC,UAACG,EAAoB;QAAnBf,OAAO;MAAEgB,SAAS;IAAM,OAAGhB,OAAO,SAAIgB,SAAW;EAAzB,CAAyB,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,kFAM5E;AArB+C,CAqB/C;AAED;AAEA,IAAMT,aAAa,GAAG,SAAhBA,aAAa,GAAG;EAAC;OAAA,UAAmB,EAAnBU,qBAAmB,EAAnBA,IAAmB;IAAnBC;;EAAwB,aAAIA,MAAM,CAACF,IAAI,CAAC,EAAE,CAAC,MAAG;AAAtB,CAAsB;AAErE,IAAMR,aAAa,GAAG,SAAhBA,aAAa,CAAIW,KAAa;EAAK,6BAAsB,CAACA,KAAK,EAAE,CAAC,CAAC;AAAhC,CAAgC;AAEzE,IAAMP,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIG,SAAiB;EAC5C,IAAIpB,WAAW,CAACoB,SAAS,CAAC,EAAE,OAAOP,aAAa,CAACO,SAAS,CAAC;EAE3D,IAAItB,aAAa,CAACsB,SAAS,CAAC,EAAE;IAC5B,IAAMK,EAAE,GAAG1B,aAAa,CAACqB,SAAS,CAAC;IACnC,IAAMM,EAAE,GAAGzB,YAAY,CAACmB,SAAS,CAAC;IAClC,OAAO,KAAGP,aAAa,CAACY,EAAE,CAAC,GAAGZ,aAAa,CAACa,EAAE,CAAG;;EAGnD,IAAMC,GAAG,GAAG/B,WAAW,CAACwB,SAAS,CAAC;EAClC,IAAMQ,GAAG,GAAG,OAAKD,GAAG,+CAA4C;EAChE,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;AACtB,CAAC","names":["toHexString","toHexStringOfMinLength","hasSurrogates","highSurrogate","isWithinBMP","lowSurrogate","createCmap","glyphs","glyphId","bfChars","Array","length","idx","len","glyph","id","cmapHexFormat","cmapHexString","unicode","codePoints","map","cmapCodePointFormat","fillCmapTemplate","_a","codePoint","join","_i","values","value","hs","ls","hex","msg","Error"],"sourceRoot":"","sources":["../../../src/core/embedders/CMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}