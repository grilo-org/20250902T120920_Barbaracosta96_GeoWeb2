{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFPageLeaf from \"./PDFPageLeaf\";\nimport { InvalidTargetIndexError, CorruptPageTreeError } from \"../errors\";\nvar PDFPageTree = /** @class */function (_super) {\n  __extends(PDFPageTree, _super);\n  function PDFPageTree() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFPageTree.prototype.Parent = function () {\n    return this.lookup(PDFName.of('Parent'));\n  };\n  PDFPageTree.prototype.Kids = function () {\n    return this.lookup(PDFName.of('Kids'), PDFArray);\n  };\n  PDFPageTree.prototype.Count = function () {\n    return this.lookup(PDFName.of('Count'), PDFNumber);\n  };\n  PDFPageTree.prototype.pushTreeNode = function (treeRef) {\n    var Kids = this.Kids();\n    Kids.push(treeRef);\n  };\n  PDFPageTree.prototype.pushLeafNode = function (leafRef) {\n    var Kids = this.Kids();\n    this.insertLeafKid(Kids.size(), leafRef);\n  };\n  /**\n   * Inserts the given ref as a leaf node of this page tree at the specified\n   * index (zero-based). Also increments the `Count` of each page tree in the\n   * hierarchy to accomodate the new page.\n   *\n   * Returns the ref of the PDFPageTree node into which `leafRef` was inserted,\n   * or `undefined` if it was inserted into the root node (the PDFPageTree upon\n   * which the method was first called).\n   */\n  PDFPageTree.prototype.insertLeafNode = function (leafRef, targetIndex) {\n    var Kids = this.Kids();\n    var Count = this.Count().asNumber();\n    if (targetIndex > Count) {\n      throw new InvalidTargetIndexError(targetIndex, Count);\n    }\n    var leafsRemainingUntilTarget = targetIndex;\n    for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n      if (leafsRemainingUntilTarget === 0) {\n        // Insert page and return\n        this.insertLeafKid(idx, leafRef);\n        return undefined;\n      }\n      var kidRef = Kids.get(idx);\n      var kid = this.context.lookup(kidRef);\n      if (kid instanceof PDFPageTree) {\n        if (kid.Count().asNumber() > leafsRemainingUntilTarget) {\n          // Dig in\n          return kid.insertLeafNode(leafRef, leafsRemainingUntilTarget) || kidRef;\n        } else {\n          // Move on\n          leafsRemainingUntilTarget -= kid.Count().asNumber();\n        }\n      }\n      if (kid instanceof PDFPageLeaf) {\n        // Move on\n        leafsRemainingUntilTarget -= 1;\n      }\n    }\n    if (leafsRemainingUntilTarget === 0) {\n      // Insert page at the end and return\n      this.insertLeafKid(Kids.size(), leafRef);\n      return undefined;\n    }\n    // Should never get here if `targetIndex` is valid\n    throw new CorruptPageTreeError(targetIndex, 'insertLeafNode');\n  };\n  /**\n   * Removes the leaf node at the specified index (zero-based) from this page\n   * tree. Also decrements the `Count` of each page tree in the hierarchy to\n   * account for the removed page.\n   *\n   * If `prune` is true, then intermediate tree nodes will be removed from the\n   * tree if they contain 0 children after the leaf node is removed.\n   */\n  PDFPageTree.prototype.removeLeafNode = function (targetIndex, prune) {\n    if (prune === void 0) {\n      prune = true;\n    }\n    var Kids = this.Kids();\n    var Count = this.Count().asNumber();\n    if (targetIndex >= Count) {\n      throw new InvalidTargetIndexError(targetIndex, Count);\n    }\n    var leafsRemainingUntilTarget = targetIndex;\n    for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n      var kidRef = Kids.get(idx);\n      var kid = this.context.lookup(kidRef);\n      if (kid instanceof PDFPageTree) {\n        if (kid.Count().asNumber() > leafsRemainingUntilTarget) {\n          // Dig in\n          kid.removeLeafNode(leafsRemainingUntilTarget, prune);\n          if (prune && kid.Kids().size() === 0) Kids.remove(idx);\n          return;\n        } else {\n          // Move on\n          leafsRemainingUntilTarget -= kid.Count().asNumber();\n        }\n      }\n      if (kid instanceof PDFPageLeaf) {\n        if (leafsRemainingUntilTarget === 0) {\n          // Remove page and return\n          this.removeKid(idx);\n          return;\n        } else {\n          // Move on\n          leafsRemainingUntilTarget -= 1;\n        }\n      }\n    }\n    // Should never get here if `targetIndex` is valid\n    throw new CorruptPageTreeError(targetIndex, 'removeLeafNode');\n  };\n  PDFPageTree.prototype.ascend = function (visitor) {\n    visitor(this);\n    var Parent = this.Parent();\n    if (Parent) Parent.ascend(visitor);\n  };\n  /** Performs a Post-Order traversal of this page tree */\n  PDFPageTree.prototype.traverse = function (visitor) {\n    var Kids = this.Kids();\n    for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n      var kidRef = Kids.get(idx);\n      var kid = this.context.lookup(kidRef);\n      if (kid instanceof PDFPageTree) kid.traverse(visitor);\n      visitor(kid, kidRef);\n    }\n  };\n  PDFPageTree.prototype.insertLeafKid = function (kidIdx, leafRef) {\n    var Kids = this.Kids();\n    this.ascend(function (node) {\n      var newCount = node.Count().asNumber() + 1;\n      node.set(PDFName.of('Count'), PDFNumber.of(newCount));\n    });\n    Kids.insert(kidIdx, leafRef);\n  };\n  PDFPageTree.prototype.removeKid = function (kidIdx) {\n    var Kids = this.Kids();\n    var kid = Kids.lookup(kidIdx);\n    if (kid instanceof PDFPageLeaf) {\n      this.ascend(function (node) {\n        var newCount = node.Count().asNumber() - 1;\n        node.set(PDFName.of('Count'), PDFNumber.of(newCount));\n      });\n    }\n    Kids.remove(kidIdx);\n  };\n  PDFPageTree.withContext = function (context, parent) {\n    var dict = new Map();\n    dict.set(PDFName.of('Type'), PDFName.of('Pages'));\n    dict.set(PDFName.of('Kids'), context.obj([]));\n    dict.set(PDFName.of('Count'), context.obj(0));\n    if (parent) dict.set(PDFName.of('Parent'), parent);\n    return new PDFPageTree(dict, context);\n  };\n  PDFPageTree.fromMapWithContext = function (map, context) {\n    return new PDFPageTree(map, context);\n  };\n  return PDFPageTree;\n}(PDFDict);\nexport default PDFPageTree;","map":{"version":3,"mappings":"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","names":["PDFArray","PDFDict","PDFName","PDFNumber","PDFPageLeaf","InvalidTargetIndexError","CorruptPageTreeError","__extends","PDFPageTree","lookup","of","treeRef","Kids","push","leafRef","insertLeafKid","size","targetIndex","Count","asNumber","leafsRemainingUntilTarget","idx","len","undefined","kidRef","get","kid","context","insertLeafNode","prune","removeLeafNode","remove","removeKid","visitor","Parent","ascend","traverse","kidIdx","node","newCount","set","insert","parent","dict","Map","obj","map"],"sourceRoot":"","sources":["../../../src/core/structures/PDFPageTree.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}