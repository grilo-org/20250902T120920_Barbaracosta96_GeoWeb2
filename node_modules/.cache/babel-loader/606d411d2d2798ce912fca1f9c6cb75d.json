{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\n/**\n * Represents a radio group field of a [[PDFForm]].\n *\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\n * radio group is to enable users to select one option from a set of mutually\n * exclusive choices. Each choice in a radio group is represented by a radio\n * button. Radio buttons each have two states: `on` and `off`. At most one\n * radio button in a group may be in the `on` state at any time. Users can\n * click on a radio button to select it (and thereby automatically deselect any\n * other radio button that might have already been selected). Some radio\n * groups allow users to toggle a selected radio button `off` by clicking on\n * it (see [[PDFRadioGroup.isOffToggleable]]).\n *\n * Note that some radio groups allow multiple radio buttons to be in the `on`\n * state at the same type **if** they represent the same underlying value (see\n * [[PDFRadioGroup.isMutuallyExclusive]]).\n */\nvar PDFRadioGroup = /** @class */function (_super) {\n  __extends(PDFRadioGroup, _super);\n  function PDFRadioGroup(acroRadioButton, ref, doc) {\n    var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n    assertIs(acroRadioButton, 'acroRadioButton', [[PDFAcroRadioButton, 'PDFAcroRadioButton']]);\n    _this.acroField = acroRadioButton;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this radio group. Each option is\n   * represented by a radio button. These radio buttons are displayed at\n   * various locations in the document, potentially on different pages (though\n   * typically they are stacked horizontally or vertically on the same page).\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * const options = radioGroup.getOptions()\n   * console.log('Radio Group options:', options)\n   * ```\n   * @returns The options for this radio group.\n   */\n  PDFRadioGroup.prototype.getOptions = function () {\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var exportOptions = new Array(exportValues.length);\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        exportOptions[idx] = exportValues[idx].decodeText();\n      }\n      return exportOptions;\n    }\n    var onValues = this.acroField.getOnValues();\n    var onOptions = new Array(onValues.length);\n    for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n      onOptions[idx] = onValues[idx].decodeText();\n    }\n    return onOptions;\n  };\n  /**\n   * Get the selected option for this radio group. The selected option is\n   * represented by the radio button in this group that is turned on. At most\n   * one radio button in a group can be selected. If no buttons in this group\n   * are selected, `undefined` is returned.\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * const selected = radioGroup.getSelected()\n   * console.log('Selected radio button:', selected)\n   * ```\n   * @returns The selected option for this radio group.\n   */\n  PDFRadioGroup.prototype.getSelected = function () {\n    var value = this.acroField.getValue();\n    if (value === PDFName.of('Off')) return undefined;\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var onValues = this.acroField.getOnValues();\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        if (onValues[idx] === value) return exportValues[idx].decodeText();\n      }\n    }\n    return value.decodeText();\n  };\n  // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n  // //       aren't removing the widget reference from the page's Annots?\n  // removeOption(option: string) {\n  //   assertIs(option, 'option', ['string']);\n  //   // TODO: Assert is valid `option`!\n  //   const onValues = this.acroField.getOnValues();\n  //   const exportValues = this.acroField.getExportValues();\n  //   if (exportValues) {\n  //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n  //       if (exportValues[idx].decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   } else {\n  //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n  //       const value = onValues[idx];\n  //       if (value.decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   }\n  // }\n  /**\n   * Select an option for this radio group. This operation is analogous to a\n   * human user clicking one of the radio buttons in this group via a PDF\n   * reader to toggle it on. This method will update the underlying state of\n   * the radio group to indicate which option has been selected. PDF libraries\n   * and readers will be able to extract this value from the saved document and\n   * determine which option was selected.\n   *\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\n   * radioGroup.select('One Punch Man')\n   * ```\n   *\n   * This method will mark this radio group as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a dot inside the widget of this check box field\n   * that represents the selected option.\n   *\n   * @param option The option to be selected.\n   */\n  PDFRadioGroup.prototype.select = function (option) {\n    assertIs(option, 'option', ['string']);\n    var validOptions = this.getOptions();\n    assertIsOneOf(option, 'option', validOptions);\n    this.markAsDirty();\n    var onValues = this.acroField.getOnValues();\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        if (exportValues[idx].decodeText() === option) {\n          this.acroField.setValue(onValues[idx]);\n        }\n      }\n    } else {\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        var value = onValues[idx];\n        if (value.decodeText() === option) this.acroField.setValue(value);\n      }\n    }\n  };\n  /**\n   * Clear any selected option for this dropdown. This will result in all\n   * radio buttons in this group being toggled off. This method will update\n   * the underlying state of the dropdown to indicate that no radio buttons\n   * have been selected.\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.clear()\n   * ```\n   * This method will mark this radio group as dirty. See\n   * [[PDFRadioGroup.select]] for more details about what this means.\n   */\n  PDFRadioGroup.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if users can click on radio buttons in this group to toggle\n   * them off. The alternative is that once a user clicks on a radio button\n   * to select it, the only way to deselect it is by selecting on another radio\n   * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\n   * [[PDFRadioGroup.disableOffToggling]]. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\n   * ```\n   */\n  PDFRadioGroup.prototype.isOffToggleable = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\n  };\n  /**\n   * Allow users to click on selected radio buttons in this group to toggle\n   * them off. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.enableOffToggling()\n   * ```\n   * > **NOTE:** This feature is documented in the PDF specification\n   * > (Table 226). However, most PDF readers do not respect this option and\n   * > prevent users from toggling radio buttons off even when it is enabled.\n   * > At the time of this writing (9/6/2020) Mac's Preview software did\n   * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\n   * > not.\n   */\n  PDFRadioGroup.prototype.enableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\n  };\n  /**\n   * Prevent users from clicking on selected radio buttons in this group to\n   * toggle them off. Clicking on a selected radio button will have no effect.\n   * The only way to deselect a selected radio button is to click on a\n   * different radio button in the group. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.disableOffToggling()\n   * ```\n   */\n  PDFRadioGroup.prototype.disableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\n  };\n  /**\n   * Returns `true` if the radio buttons in this group are mutually exclusive.\n   * This means that when the user selects a radio button, only that specific\n   * button will be turned on. Even if other radio buttons in the group\n   * represent the same value, they will not be enabled. The alternative to\n   * this is that clicking a radio button will select that button along with\n   * any other radio buttons in the group that share the same value. See\n   * [[PDFRadioGroup.enableMutualExclusion]] and\n   * [[PDFRadioGroup.disableMutualExclusion]].\n   * For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\n   * ```\n   */\n  PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\n  };\n  /**\n   * When the user clicks a radio button in this group it will be selected. In\n   * addition, any other radio buttons in this group that share the same\n   * underlying value will also be selected. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.enableMutualExclusion()\n   * ```\n   * Note that this option must be enabled prior to adding options to the\n   * radio group. It does not currently apply retroactively to existing\n   * radio buttons in the group.\n   */\n  PDFRadioGroup.prototype.enableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\n  };\n  /**\n   * When the user clicks a radio button in this group only it will be selected.\n   * No other radio buttons in the group will be selected, even if they share\n   * the same underlying value. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.disableMutualExclusion()\n   * ```\n   * Note that this option must be disabled prior to adding options to the\n   * radio group. It does not currently apply retroactively to existing\n   * radio buttons in the group.\n   */\n  PDFRadioGroup.prototype.disableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\n  };\n  /**\n   * Add a new radio button to this group on the specified page. For example:\n   * ```js\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('best.gundam')\n   *\n   * const options = {\n   *   x: 50,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * }\n   *\n   * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\n   * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\n   * ```\n   * This will create a new radio button widget for this radio group field.\n   * @param option The option that the radio button widget represents.\n   * @param page The page to which the radio button widget should be added.\n   * @param options The options to be used when adding the radio button widget.\n   */\n  PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    assertIs(option, 'option', ['string']);\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this radio button\n    var widget = this.createWidget({\n      x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n      backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n      borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n      rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, apStateValue);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this group's radio button widgets do not have an\n   * appearance stream for their current state. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this radio group needs an appearance update.\n   */\n  PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this group's radio button widgets\n   * using the default appearance provider for radio groups. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.defaultUpdateAppearances()\n   * ```\n   */\n  PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  // rg.updateAppearances((field: any, widget: any) => {\n  //   assert(field === rg);\n  //   assert(widget instanceof PDFWidgetAnnotation);\n  //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n  // });\n  /**\n   * Update the appearance streams for each of this group's radio button widgets\n   * using the given appearance provider. If no `provider` is passed, the\n   * default appearance provider for radio groups will be used. For example:\n   * ```js\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n   * radioGroup.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\n   *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFRadioGroup.prototype.updateAppearances = function (provider) {\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = widget.getOnValue();\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n  };\n  PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getOptionList]] method, which will create an\n   * > instance of [[PDFOptionList]] for you.\n   *\n   * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\n   * and ref\n   *\n   * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\n   *                        radio group.\n   * @param ref The unique reference for this radio group.\n   * @param doc The document to which this radio group will belong.\n   */\n  PDFRadioGroup.of = function (acroRadioButton, ref, doc) {\n    return new PDFRadioGroup(acroRadioButton, ref, doc);\n  };\n  return PDFRadioGroup;\n}(PDFField);\nexport default PDFRadioGroup;","map":{"version":3,"mappings":";AACA,OAAOA,OAAO;AACd,OAAOC,QAAQ,IAEbC,4BAA4B,QAC7B;AACD,SAEEC,mBAAmB,EACnBC,mCAAmC,QACpC;AACD,SAASC,GAAG,QAAE;AACd,SAASC,OAAO,QAAE;AAElB,SACEC,OAAO,EAEPC,YAAY,EACZC,OAAO,EAEPC,kBAAkB,EAClBC,eAAe,QAChB;AACD,SAASC,QAAQ,EAAEC,iBAAiB,EAAEC,aAAa,QAAE;AAErD;;;;;;;;;;;;;;;;;AAiBA;EAA2CC;EAuBzC,uBACEC,eAAmC,EACnCC,GAAW,EACXC,GAAgB;IAHlB,YAKEC,kBAAMH,eAAe,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAEhCN,QAAQ,CAACI,eAAe,EAAE,iBAAiB,EAAE,CAC3C,CAACN,kBAAkB,EAAE,oBAAoB,CAAC,CAC3C,CAAC;IAEFU,KAAI,CAACC,SAAS,GAAGL,eAAe;;EAClC;EAEA;;;;;;;;;;;;;EAaAM,kCAAU,GAAV;IACE,IAAMC,YAAY,GAAG,IAAI,CAACF,SAAS,CAACG,eAAe,EAAE;IACrD,IAAID,YAAY,EAAE;MAChB,IAAME,aAAa,GAAG,IAAIC,KAAK,CAASH,YAAY,CAACI,MAAM,CAAC;MAC5D,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGN,YAAY,CAACI,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAC7DH,aAAa,CAACG,GAAG,CAAC,GAAGL,YAAY,CAACK,GAAG,CAAC,CAACE,UAAU,EAAE;;MAErD,OAAOL,aAAa;;IAGtB,IAAMM,QAAQ,GAAG,IAAI,CAACV,SAAS,CAACW,WAAW,EAAE;IAC7C,IAAMC,SAAS,GAAG,IAAIP,KAAK,CAASK,QAAQ,CAACJ,MAAM,CAAC;IACpD,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGI,SAAS,CAACN,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC1DK,SAAS,CAACL,GAAG,CAAC,GAAGG,QAAQ,CAACH,GAAG,CAAC,CAACE,UAAU,EAAE;;IAE7C,OAAOG,SAAS;EAClB,CAAC;EAED;;;;;;;;;;;;;EAaAX,mCAAW,GAAX;IACE,IAAMY,KAAK,GAAG,IAAI,CAACb,SAAS,CAACc,QAAQ,EAAE;IACvC,IAAID,KAAK,KAAK3B,OAAO,CAAC6B,EAAE,CAAC,KAAK,CAAC,EAAE,OAAOC,SAAS;IACjD,IAAMd,YAAY,GAAG,IAAI,CAACF,SAAS,CAACG,eAAe,EAAE;IACrD,IAAID,YAAY,EAAE;MAChB,IAAMQ,QAAQ,GAAG,IAAI,CAACV,SAAS,CAACW,WAAW,EAAE;MAC7C,KAAK,IAAIJ,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGE,QAAQ,CAACJ,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QACzD,IAAIG,QAAQ,CAACH,GAAG,CAAC,KAAKM,KAAK,EAAE,OAAOX,YAAY,CAACK,GAAG,CAAC,CAACE,UAAU,EAAE;;;IAGtE,OAAOI,KAAK,CAACJ,UAAU,EAAE;EAC3B,CAAC;EAED;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAR,8BAAM,GAAN,UAAOgB,MAAc;IACnB1B,QAAQ,CAAC0B,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IAEtC,IAAMC,YAAY,GAAG,IAAI,CAACC,UAAU,EAAE;IACtC1B,aAAa,CAACwB,MAAM,EAAE,QAAQ,EAAEC,YAAY,CAAC;IAE7C,IAAI,CAACE,WAAW,EAAE;IAElB,IAAMV,QAAQ,GAAG,IAAI,CAACV,SAAS,CAACW,WAAW,EAAE;IAC7C,IAAMT,YAAY,GAAG,IAAI,CAACF,SAAS,CAACG,eAAe,EAAE;IACrD,IAAID,YAAY,EAAE;MAChB,KAAK,IAAIK,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGN,YAAY,CAACI,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QAC7D,IAAIL,YAAY,CAACK,GAAG,CAAC,CAACE,UAAU,EAAE,KAAKQ,MAAM,EAAE;UAC7C,IAAI,CAACjB,SAAS,CAACqB,QAAQ,CAACX,QAAQ,CAACH,GAAG,CAAC,CAAC;;;KAG3C,MAAM;MACL,KAAK,IAAIA,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGE,QAAQ,CAACJ,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QACzD,IAAMM,KAAK,GAAGH,QAAQ,CAACH,GAAG,CAAC;QAC3B,IAAIM,KAAK,CAACJ,UAAU,EAAE,KAAKQ,MAAM,EAAE,IAAI,CAACjB,SAAS,CAACqB,QAAQ,CAACR,KAAK,CAAC;;;EAGvE,CAAC;EAED;;;;;;;;;;;;;EAaAZ,6BAAK,GAAL;IACE,IAAI,CAACmB,WAAW,EAAE;IAClB,IAAI,CAACpB,SAAS,CAACqB,QAAQ,CAACnC,OAAO,CAAC6B,EAAE,CAAC,KAAK,CAAC,CAAC;EAC5C,CAAC;EAED;;;;;;;;;;;EAWAd,uCAAe,GAAf;IACE,OAAO,CAAC,IAAI,CAACD,SAAS,CAACsB,OAAO,CAAChC,eAAe,CAACiC,aAAa,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;;;;EAcAtB,yCAAiB,GAAjB;IACE,IAAI,CAACD,SAAS,CAACwB,SAAS,CAAClC,eAAe,CAACiC,aAAa,EAAE,KAAK,CAAC;EAChE,CAAC;EAED;;;;;;;;;;EAUAtB,0CAAkB,GAAlB;IACE,IAAI,CAACD,SAAS,CAACwB,SAAS,CAAClC,eAAe,CAACiC,aAAa,EAAE,IAAI,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;;;;;EAeAtB,2CAAmB,GAAnB;IACE,OAAO,CAAC,IAAI,CAACD,SAAS,CAACsB,OAAO,CAAChC,eAAe,CAACmC,cAAc,CAAC;EAChE,CAAC;EAED;;;;;;;;;;;;EAYAxB,6CAAqB,GAArB;IACE,IAAI,CAACD,SAAS,CAACwB,SAAS,CAAClC,eAAe,CAACmC,cAAc,EAAE,KAAK,CAAC;EACjE,CAAC;EAED;;;;;;;;;;;;EAYAxB,8CAAsB,GAAtB;IACE,IAAI,CAACD,SAAS,CAACwB,SAAS,CAAClC,eAAe,CAACmC,cAAc,EAAE,IAAI,CAAC;EAChE,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BAxB,uCAAe,GAAf,UACEgB,MAAc,EACdS,IAAa,EACbC,OAAgC;;IAEhCpC,QAAQ,CAAC0B,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IACtC1B,QAAQ,CAACmC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC/C,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAC9CE,4BAA4B,CAAC8C,OAAO,CAAC;IAErC;IACA,IAAMC,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC;MAC/BC,CAAC,QAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,CAAC,mCAAI,CAAC;MAClBC,CAAC,QAAEJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,CAAC,mCAAI,CAAC;MAClBC,KAAK,QAAEL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,KAAK,mCAAI,EAAE;MAC3BC,MAAM,QAAEN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,MAAM,mCAAI,EAAE;MAC7BC,SAAS,QAAEP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,SAAS,mCAAIlD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC7CmD,eAAe,QAAER,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,eAAe,mCAAInD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzDoD,WAAW,QAAET,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,WAAW,mCAAIpD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACjDqD,WAAW,QAAEV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEU,WAAW,mCAAI,CAAC;MACtCC,MAAM,QAAEX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,MAAM,mCAAIrD,OAAO,CAAC,CAAC,CAAC;MACrCsD,MAAM,EAAEZ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,MAAM;MACvBb,IAAI,EAAEA,IAAI,CAAC9B;KACZ,CAAC;IACF,IAAM4C,SAAS,GAAG,IAAI,CAAC3C,GAAG,CAAC4C,OAAO,CAACC,QAAQ,CAACd,MAAM,CAACe,IAAI,CAAC;IAExD;IACA,IAAMC,YAAY,GAAG,IAAI,CAAC5C,SAAS,CAAC6C,gBAAgB,CAClDL,SAAS,EACTrD,YAAY,CAAC2D,QAAQ,CAAC7B,MAAM,CAAC,EAC7B,CAAC,IAAI,CAAC8B,mBAAmB,EAAE,CAC5B;IAED;IACAnB,MAAM,CAACoB,kBAAkB,CAAC9D,OAAO,CAAC6B,EAAE,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAI,CAACkC,sBAAsB,CAACrB,MAAM,EAAEgB,YAAY,CAAC;IAEjD;IACAlB,IAAI,CAACwB,IAAI,CAACC,QAAQ,CAACX,SAAS,CAAC;EAC/B,CAAC;EAED;;;;;;;;;EASAvC,8CAAsB,GAAtB;;IACE,IAAMmD,OAAO,GAAG,IAAI,CAACpD,SAAS,CAACqD,UAAU,EAAE;IAC3C,KAAK,IAAI9C,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG4C,OAAO,CAAC9C,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACxD,IAAMqB,MAAM,GAAGwB,OAAO,CAAC7C,GAAG,CAAC;MAC3B,IAAM+C,KAAK,GAAG1B,MAAM,CAAC2B,kBAAkB,EAAE;MACzC,IAAMC,MAAM,SAAG5B,MAAM,CAAC6B,cAAc,EAAE,0CAAED,MAAM;MAE9C,IAAI,EAAEA,MAAM,YAAYpE,OAAO,CAAC,EAAE,OAAO,IAAI;MAC7C,IAAIkE,KAAK,IAAI,CAACE,MAAM,CAACE,GAAG,CAACJ,KAAK,CAAC,EAAE,OAAO,IAAI;;IAG9C,OAAO,KAAK;EACd,CAAC;EAED;;;;;;;;EAQArD,gDAAwB,GAAxB;IACE,IAAI,CAAC0D,iBAAiB,EAAE;EAC1B,CAAC;EAED;EACA;EACA;EACA;EACA;EAEA;;;;;;;;;;;;;;;;;EAiBA1D,yCAAiB,GAAjB,UAAkB2D,QAA+C;IAC/DpE,iBAAiB,CAACoE,QAAQ,EAAE,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC;IAEnD,IAAMT,OAAO,GAAG,IAAI,CAACpD,SAAS,CAACqD,UAAU,EAAE;IAC3C,KAAK,IAAI9C,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG4C,OAAO,CAAC9C,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACxD,IAAMqB,MAAM,GAAGwB,OAAO,CAAC7C,GAAG,CAAC;MAC3B,IAAMuD,OAAO,GAAGlC,MAAM,CAACmC,UAAU,EAAE;MACnC,IAAI,CAACD,OAAO,EAAE;MACd,IAAI,CAACb,sBAAsB,CAACrB,MAAM,EAAEkC,OAAO,EAAEF,QAAQ,CAAC;;EAE1D,CAAC;EAEO3D,8CAAsB,GAA9B,UACE2B,MAA2B,EAC3BkC,OAAgB,EAChBF,QAA+C;IAE/C,IAAMI,UAAU,GAAGJ,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI7E,mCAAmC;IAClE,IAAMkF,WAAW,GAAGnF,mBAAmB,CAACkF,UAAU,CAAC,IAAI,EAAEpC,MAAM,CAAC,CAAC;IACjE,IAAI,CAACsC,2BAA2B,CAACtC,MAAM,EAAEkC,OAAO,EAAEG,WAAW,CAAC;EAChE,CAAC;EA1aD;;;;;;;;;;;;;EAaOhE,gBAAE,GAAG,UACVN,eAAmC,EACnCC,GAAW,EACXC,GAAgB;IACb,WAAII,aAAa,CAACN,eAAe,EAAEC,GAAG,EAAEC,GAAG,CAAC;EAA5C,CAA4C;EA0ZnD,oBAAC;CAAA,CA5a0CjB,QAAQ;eAA9BqB,aAAa","names":["PDFPage","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultRadioGroupAppearanceProvider","rgb","degrees","PDFName","PDFHexString","PDFDict","PDFAcroRadioButton","AcroButtonFlags","assertIs","assertOrUndefined","assertIsOneOf","__extends","acroRadioButton","ref","doc","_super","_this","acroField","PDFRadioGroup","exportValues","getExportValues","exportOptions","Array","length","idx","len","decodeText","onValues","getOnValues","onOptions","value","getValue","of","undefined","option","validOptions","getOptions","markAsDirty","setValue","hasFlag","NoToggleToOff","setFlagTo","RadiosInUnison","page","options","widget","createWidget","x","y","width","height","textColor","backgroundColor","borderColor","borderWidth","rotate","hidden","widgetRef","context","register","dict","apStateValue","addWidgetWithOpt","fromText","isMutuallyExclusive","setAppearanceState","updateWidgetAppearance","node","addAnnot","widgets","getWidgets","state","getAppearanceState","normal","getAppearances","has","updateAppearances","provider","Function","onValue","getOnValue","apProvider","appearances","updateOnOffWidgetAppearance"],"sourceRoot":"","sources":["../../../src/api/form/PDFRadioGroup.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}