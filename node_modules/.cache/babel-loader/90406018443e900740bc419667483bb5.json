{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The LZWStream class contained in this file is a TypeScript port of the\n * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar LZWStream = /** @class */function (_super) {\n  __extends(LZWStream, _super);\n  function LZWStream(stream, maybeLength, earlyChange) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.cachedData = 0;\n    _this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange: earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n    _this.lzwState = lzwState;\n    return _this;\n  }\n  LZWStream.prototype.readBlock = function () {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2;\n    var decodedSizeDelta = blockSize;\n    var i;\n    var j;\n    var q;\n    var lzwState = this.lzwState;\n    if (!lzwState) {\n      return; // eof was found\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n      if (!code || code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n  LZWStream.prototype.readBits = function (n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n    while (bitsCached < n) {\n      var c = this.stream.getByte();\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n  return LZWStream;\n}(DecodeStream);\nexport default LZWStream;","map":{"version":3,"mappings":"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","names":["DecodeStream","__extends","stream","maybeLength","earlyChange","_super","_this","cachedData","bitsCached","maxLzwDictionarySize","lzwState","codeLength","nextCode","dictionaryValues","Uint8Array","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","i","LZWStream","blockSize","estimatedDecodedSize","decodedSizeDelta","j","q","prevCode","decodedLength","currentBufferLength","bufferLength","buffer","ensureBuffer","code","readBits","hasPrev","eof","Math","min","log","n","c","getByte"],"sourceRoot":"","sources":["../../../src/core/streams/LZWStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}