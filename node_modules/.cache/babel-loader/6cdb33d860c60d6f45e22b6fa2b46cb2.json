{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedFile = /** @class */function () {\n  function PDFEmbeddedFile(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable files get embedded.\n   *\n   * Embed this embeddable file in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedFile.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ref, Names, EmbeddedFiles, EFNames, AF;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _a.sent();\n            if (!this.doc.catalog.has(PDFName.of('Names'))) {\n              this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n            }\n            Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n            if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n              Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n            }\n            EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n            if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n              EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n            }\n            EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n            EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n            EFNames.push(ref);\n            /**\n             * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n             *\n             * The following document outlines the uses cases of the associated files (AF) tag.\n             * See:\n             * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n             */\n            if (!this.doc.catalog.has(PDFName.of('AF'))) {\n              this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n            }\n            AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n            AF.push(ref);\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.attach]] method, which will create\n   * instances of [[PDFEmbeddedFile]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this file.\n   * @param doc The document to which the file will belong.\n   * @param embedder The embedder that will be used to embed the file.\n   */\n  PDFEmbeddedFile.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedFile(ref, doc, embedder);\n  };\n  return PDFEmbeddedFile;\n}();\nexport default PDFEmbeddedFile;","map":{"version":3,"mappings":";AAGA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,YAAY,QAAU;AAE3D;;;AAGA;EAwBE,yBAAoBC,GAAW,EAAEC,GAAgB,EAAEC,QAAsB;IAHjE,oBAAe,GAAG,KAAK;IAI7B,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;EASMC,+BAAK,GAAX;;;;;;iBACM,CAAC,IAAI,CAACC,eAAe,EAArB;YACU,qBAAM,IAAI,CAACF,QAAQ,CAACG,gBAAgB,CAC9C,IAAI,CAACJ,GAAG,CAACK,OAAO,EAChB,IAAI,CAACN,GAAG,CACT;;YAHKA,GAAG,GAAGO,SAGX;YAED,IAAI,CAAC,IAAI,CAACN,GAAG,CAACO,OAAO,CAACC,GAAG,CAACb,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cAC9C,IAAI,CAACT,GAAG,CAACO,OAAO,CAACG,GAAG,CAACf,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,CAACT,GAAG,CAACK,OAAO,CAACM,GAAG,CAAC,EAAE,CAAC,CAAC;;YAE/DC,KAAK,GAAG,IAAI,CAACZ,GAAG,CAACO,OAAO,CAACM,MAAM,CAAClB,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,EAAEZ,OAAO,CAAC;YAEnE,IAAI,CAACe,KAAK,CAACJ,GAAG,CAACb,OAAO,CAACc,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE;cAC3CG,KAAK,CAACF,GAAG,CAACf,OAAO,CAACc,EAAE,CAAC,eAAe,CAAC,EAAE,IAAI,CAACT,GAAG,CAACK,OAAO,CAACM,GAAG,CAAC,EAAE,CAAC,CAAC;;YAE5DG,aAAa,GAAGF,KAAK,CAACC,MAAM,CAAClB,OAAO,CAACc,EAAE,CAAC,eAAe,CAAC,EAAEZ,OAAO,CAAC;YAExE,IAAI,CAACiB,aAAa,CAACN,GAAG,CAACb,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE;cAC3CK,aAAa,CAACJ,GAAG,CAACf,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,CAACT,GAAG,CAACK,OAAO,CAACM,GAAG,CAAC,EAAE,CAAC,CAAC;;YAE5DI,OAAO,GAAGD,aAAa,CAACD,MAAM,CAAClB,OAAO,CAACc,EAAE,CAAC,OAAO,CAAC,EAAEb,QAAQ,CAAC;YAEnEmB,OAAO,CAACC,IAAI,CAAClB,YAAY,CAACmB,QAAQ,CAAC,IAAI,CAAChB,QAAQ,CAACiB,QAAQ,CAAC,CAAC;YAC3DH,OAAO,CAACC,IAAI,CAACjB,GAAG,CAAC;YAEjB;;;;;;;YAQA,IAAI,CAAC,IAAI,CAACC,GAAG,CAACO,OAAO,CAACC,GAAG,CAACb,OAAO,CAACc,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE;cAC3C,IAAI,CAACT,GAAG,CAACO,OAAO,CAACG,GAAG,CAACf,OAAO,CAACc,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,CAACT,GAAG,CAACK,OAAO,CAACM,GAAG,CAAC,EAAE,CAAC,CAAC;;YAE5DQ,EAAE,GAAG,IAAI,CAACnB,GAAG,CAACO,OAAO,CAACM,MAAM,CAAClB,OAAO,CAACc,EAAE,CAAC,IAAI,CAAC,EAAEb,QAAQ,CAAC;YAC9DuB,EAAE,CAACH,IAAI,CAACjB,GAAG,CAAC;YAEZ,IAAI,CAACI,eAAe,GAAG,IAAI;;;;;;;GAE9B;EA/ED;;;;;;;;;;;EAWOD,kBAAE,GAAG,UAACH,GAAW,EAAEC,GAAgB,EAAEC,QAAsB;IAChE,WAAIC,eAAe,CAACH,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;EAAvC,CAAuC;EAoE3C,sBAAC;CAAA,EAjFD;eAAqBC,eAAe","names":["PDFName","PDFArray","PDFDict","PDFHexString","ref","doc","embedder","PDFEmbeddedFile","alreadyEmbedded","embedIntoContext","context","_a","catalog","has","of","set","obj","Names","lookup","EmbeddedFiles","EFNames","push","fromText","fileName","AF"],"sourceRoot":"","sources":["../../src/api/PDFEmbeddedFile.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}