{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n  EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n  EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n  EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */function (_super) {\n  __extends(PDFCrossRefStream, _super);\n  function PDFCrossRefStream(dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    // Returns an array of integer pairs for each subsection of the cross ref\n    // section, where each integer pair represents:\n    //   firstObjectNumber(OfSection), length(OfSection)\n    _this.computeIndex = function () {\n      var subsections = [];\n      var subsectionLength = 0;\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var currEntry = _this.entries[idx];\n        var prevEntry = _this.entries[idx - 1];\n        if (idx === 0) {\n          subsections.push(currEntry.ref.objectNumber);\n        } else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n          subsections.push(subsectionLength);\n          subsections.push(currEntry.ref.objectNumber);\n          subsectionLength = 0;\n        }\n        subsectionLength += 1;\n      }\n      subsections.push(subsectionLength);\n      return subsections;\n    };\n    _this.computeEntryTuples = function () {\n      var entryTuples = new Array(_this.entries.length);\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var entry = _this.entries[idx];\n        if (entry.type === EntryType.Deleted) {\n          var type = entry.type,\n            nextFreeObjectNumber = entry.nextFreeObjectNumber,\n            ref = entry.ref;\n          entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Uncompressed) {\n          var type = entry.type,\n            offset = entry.offset,\n            ref = entry.ref;\n          entryTuples[idx] = [type, offset, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Compressed) {\n          var type = entry.type,\n            objectStreamRef = entry.objectStreamRef,\n            index = entry.index;\n          entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n        }\n      }\n      return entryTuples;\n    };\n    _this.computeMaxEntryByteWidths = function () {\n      var entryTuples = _this.entryTuplesCache.access();\n      var widths = [0, 0, 0];\n      for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n        var _a = entryTuples[idx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n        var firstSize = sizeInBytes(first);\n        var secondSize = sizeInBytes(second);\n        var thirdSize = sizeInBytes(third);\n        if (firstSize > widths[0]) widths[0] = firstSize;\n        if (secondSize > widths[1]) widths[1] = secondSize;\n        if (thirdSize > widths[2]) widths[2] = thirdSize;\n      }\n      return widths;\n    };\n    _this.entries = entries || [];\n    _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n    _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n    _this.indexCache = Cache.populatedBy(_this.computeIndex);\n    dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n    return _this;\n  }\n  PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    var type = EntryType.Deleted;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      nextFreeObjectNumber: nextFreeObjectNumber\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n    var type = EntryType.Uncompressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      offset: offset\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n    var type = EntryType.Compressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      objectStreamRef: objectStreamRef,\n      index: index\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.clone = function (context) {\n    var _a = this,\n      dict = _a.dict,\n      entries = _a.entries,\n      encode = _a.encode;\n    return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n  };\n  PDFCrossRefStream.prototype.getContentsString = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var value = '';\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        value += (firstBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        value += (secondBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        value += (thirdBytes[idx] || 0).toString(2);\n      }\n    }\n    return value;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContents = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        buffer[offset++] = firstBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        buffer[offset++] = secondBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        buffer[offset++] = thirdBytes[idx] || 0;\n      }\n    }\n    return buffer;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n    var byteWidths = this.maxByteWidthsCache.access();\n    var entryWidth = sum(byteWidths);\n    return entryWidth * this.entries.length;\n  };\n  PDFCrossRefStream.prototype.updateDict = function () {\n    _super.prototype.updateDict.call(this);\n    var byteWidths = this.maxByteWidthsCache.access();\n    var index = this.indexCache.access();\n    var context = this.dict.context;\n    this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n    this.dict.set(PDFName.of('Index'), context.obj(index));\n  };\n  PDFCrossRefStream.create = function (dict, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var stream = new PDFCrossRefStream(dict, [], encode);\n    stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n    return stream;\n  };\n  PDFCrossRefStream.of = function (dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFCrossRefStream(dict, entries, encode);\n  };\n  return PDFCrossRefStream;\n}(PDFFlateStream);\nexport default PDFCrossRefStream;","map":{"version":3,"mappings":"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","names":["PDFName","PDFRef","PDFFlateStream","bytesFor","Cache","reverseArray","sizeInBytes","sum","EntryType","__extends","dict","entries","encode","_super","_this","subsections","subsectionLength","idx","len","length","currEntry","prevEntry","push","ref","objectNumber","entryTuples","Array","entry","type","Deleted","nextFreeObjectNumber","generationNumber","Uncompressed","offset","Compressed","objectStreamRef","index","entryTuplesCache","access","widths","first","second","third","firstSize","secondSize","thirdSize","populatedBy","computeEntryTuples","maxByteWidthsCache","computeMaxEntryByteWidths","indexCache","computeIndex","set","of","PDFCrossRefStream","invalidate","contentsCache","context","clone","slice","byteWidths","value","entryIdx","entriesLen","firstBytes","secondBytes","thirdBytes","toString","buffer","Uint8Array","getUnencodedContentsSize","entryWidth","updateDict","obj","stream","addDeletedEntry"],"sourceRoot":"","sources":["../../../src/core/structures/PDFCrossRefStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}