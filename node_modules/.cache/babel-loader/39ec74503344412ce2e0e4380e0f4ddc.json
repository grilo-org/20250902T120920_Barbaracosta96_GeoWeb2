{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultOptionListAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFHexString, PDFStream, PDFAcroListBox, AcroChoiceFlags } from \"../../core\";\nimport { assertIs, assertIsSubset, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\n * Represents an option list field of a [[PDFForm]].\n *\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\n * option list is to enable users to select one or more options from a set of\n * possible options. Users are able to see the full set of options without\n * first having to click on the field (though scrolling may be necessary).\n * Clicking an option in the list will cause it to be selected and displayed\n * with a highlighted background. Some option lists allow users to select\n * more than one option (see [[PDFOptionList.isMultiselect]]).\n */\nvar PDFOptionList = /** @class */function (_super) {\n  __extends(PDFOptionList, _super);\n  function PDFOptionList(acroListBox, ref, doc) {\n    var _this = _super.call(this, acroListBox, ref, doc) || this;\n    assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\n    _this.acroField = acroListBox;\n    return _this;\n  }\n  /**\n   * Get the list of available options for this option list. These options will\n   * be displayed to users who view this option list in a PDF reader.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const options = optionList.getOptions()\n   * console.log('Option List options:', options)\n   * ```\n   * @returns The options for this option list.\n   */\n  PDFOptionList.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\n   * Get the selected options for this option list. These are the values that\n   * were selected by a human user via a PDF reader, or programatically via\n   * software.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * const selections = optionList.getSelected()\n   * console.log('Option List selections:', selections)\n   * ```\n   * @returns The selected options for this option list.\n   */\n  PDFOptionList.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\n   * Set the list of options that are available for this option list. These are\n   * the values that will be available for users to select when they view this\n   * option list in a PDF reader. Note that preexisting options for this\n   * option list will be removed. Only the values passed as `options` will be\n   * available to select.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('planets.optionList')\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n   * ```\n   *\n   * This method will mark this option list as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the options this field contains inside the widgets of this text\n   * field (with selected options highlighted).\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if this field contains any options\n   * with characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * @param options The options that should be available in this option list.\n   */\n  PDFOptionList.prototype.setOptions = function (options) {\n    assertIs(options, 'options', [Array]);\n    this.markAsDirty();\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\n   * Add to the list of options that are available for this option list. Users\n   * will be able to select these values in a PDF reader. In addition to the\n   * values passed as `options`, any preexisting options for this option list\n   * will still be available for users to select.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('rockets.optionList')\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options New options that should be available in this option list.\n   */\n  PDFOptionList.prototype.addOptions = function (options) {\n    assertIs(options, 'options', ['string', Array]);\n    this.markAsDirty();\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\n   * Select one or more values for this option list. This operation is analogous\n   * to a human user opening the option list in a PDF reader and clicking on one\n   * or more values to select them. This method will update the underlying state\n   * of the option list to indicate which values have been selected. PDF\n   * libraries and readers will be able to extract these values from the saved\n   * document and determine which values were selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('best.superheroes.optionList')\n   * optionList.select(['One Punch Man', 'Iron Man'])\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   * @param options The options to be selected.\n   * @param merge Whether or not existing selections should be preserved.\n   */\n  PDFOptionList.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    assertIsSubset(optionsArr, 'option', validOptions);\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\n   * Clear all selected values for this option list. This operation is\n   * equivalent to selecting an empty list. This method will update the\n   * underlying state of the option list to indicate that no values have been\n   * selected.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.clear()\n   * ```\n   * This method will mark this option list as dirty. See\n   * [[PDFOptionList.setOptions]] for more details about what this means.\n   */\n  PDFOptionList.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\n   * Set the font size for the text in this field. There needs to be a\n   * default appearance string (DA) set with a font value specified\n   * for this to work. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4);\n   * ```\n   * @param fontSize The font size to set the font to.\n   */\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this option list. Font sizes\n   * may be integer or floating point numbers. Supplying a negative font size\n   * will cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.setFontSize(4)\n   * optionList.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFOptionList.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Returns `true` if the options of this option list are always displayed\n   * in alphabetical order, irrespective of the order in which the options\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\n   * [[PDFOptionList.disableSorting]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\n   * ```\n   * @returns Whether or not this option list is sorted.\n   */\n  PDFOptionList.prototype.isSorted = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  };\n  /**\n   * Always display the options of this option list in alphabetical order,\n   * irrespective of the order in which the options were added to this option\n   * list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSorting()\n   * ```\n   */\n  PDFOptionList.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  };\n  /**\n   * Do not always display the options of this option list in alphabetical\n   * order. Instead, display the options in whichever order they were added\n   * to this option list. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSorting()\n   * ```\n   */\n  PDFOptionList.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  };\n  /**\n   * Returns `true` if multiple options can be selected from this option list.\n   * See [[PDFOptionList.enableMultiselect]] and\n   * [[PDFOptionList.disableMultiselect]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\n   * ```\n   * @returns Whether or not multiple options can be selected.\n   */\n  PDFOptionList.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  };\n  /**\n   * Allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableMultiselect()\n   * ```\n   */\n  PDFOptionList.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\n   * Do not allow users to select more than one option from this option list.\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableMultiselect()\n   * ```\n   */\n  PDFOptionList.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\n   * when the user clicks the option. The alternative is that the user's\n   * selection is stored when the user leaves this option list field (by\n   * clicking outside of it - on another field, for example). See\n   * [[PDFOptionList.enableSelectOnClick]] and\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\n   * ```\n   * @returns Whether or not options are selected immediately after they are\n   *          clicked.\n   */\n  PDFOptionList.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\n   * Store the option selected by a user immediately after the user clicks the\n   * option. Do not wait for the user to leave this option list field (by\n   * clicking outside of it - on another field, for example). For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.enableSelectOnClick()\n   * ```\n   */\n  PDFOptionList.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\n   * Wait to store the option selected by a user until they leave this option\n   * list field (by clicking outside of it - on another field, for example).\n   * For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.disableSelectOnClick()\n   * ```\n   */\n  PDFOptionList.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\n   * Show this option list on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('best.gundams')\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\n   * optionList.select(['Exia', 'Virtue'])\n   *\n   * optionList.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this option list field.\n   * @param page The page to which this option list widget should be added.\n   * @param options The options to be used when adding this option list widget.\n   */\n  PDFOptionList.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this option list\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this option list has been marked as dirty, or if any of\n   * this option list's widgets do not have an appearance stream. For example:\n   * ```js\n   * const optionList = form.getOptionList('some.optionList.field')\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this option list needs an appearance update.\n   */\n  PDFOptionList.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the default appearance provider for option lists. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFOptionList.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this option list's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for option lists will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const optionList = form.getOptionList('some.optionList.field')\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawOptionList(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFOptionList.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFOptionList.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultOptionListAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\n   * > an instance of [[PDFOptionList]] for you.\n   *\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\n   * ref\n   *\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\n   * @param ref The unique reference for this option list.\n   * @param doc The document to which this option list will belong.\n   */\n  PDFOptionList.of = function (acroListBox, ref, doc) {\n    return new PDFOptionList(acroListBox, ref, doc);\n  };\n  return PDFOptionList;\n}(PDFField);\nexport default PDFOptionList;","map":{"version":3,"mappings":"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","names":["PDFPage","PDFFont","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultOptionListAppearanceProvider","rgb","degrees","PDFHexString","PDFStream","PDFAcroListBox","AcroChoiceFlags","assertIs","assertIsSubset","assertOrUndefined","assertPositive","__extends","acroListBox","ref","doc","_super","_this","acroField","PDFOptionList","rawOptions","getOptions","options","Array","length","idx","len","display","value","decodeText","values","getValues","selected","markAsDirty","optionObjects","fromText","setOptions","optionsArr","isArray","existingOptions","newOptions","concat","merge","validOptions","enableMultiselect","existingValues","setValues","fontSize","setFontSize","hasFlag","Sort","setFlagTo","MultiSelect","CommitOnSelChange","page","textColor","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","width","height","rotate","hidden","widgetRef","context","register","dict","addWidget","font","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","isDirty","widgets","getWidgets","hasAppearances","getAppearances","normal","updateAppearances","provider","Function","markAsClean","apProvider","appearances","updateWidgetAppearanceWithFont"],"sourceRoot":"","sources":["../../../src/api/form/PDFOptionList.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}