{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */function (_super) {\n  __extends(PDFAcroButton, _super);\n  function PDFAcroButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroButton.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n  PDFAcroButton.prototype.setOpt = function (opt) {\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n  };\n  PDFAcroButton.prototype.getExportValues = function () {\n    var opt = this.Opt();\n    if (!opt) return undefined;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      return [opt];\n    }\n    var values = [];\n    for (var idx = 0, len = opt.size(); idx < len; idx++) {\n      var value = opt.lookup(idx);\n      if (value instanceof PDFString || value instanceof PDFHexString) {\n        values.push(value);\n      }\n    }\n    return values;\n  };\n  PDFAcroButton.prototype.removeExportValue = function (idx) {\n    var opt = this.Opt();\n    if (!opt) return;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n      opt.remove(idx);\n    }\n  };\n  // Enforce use use of /Opt even if it isn't strictly necessary\n  PDFAcroButton.prototype.normalizeExportValues = function () {\n    var _a, _b, _c, _d;\n    var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n    var Opt = [];\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n      Opt.push(exportVal);\n    }\n    this.setOpt(Opt);\n  };\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n  PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n    var _a;\n    this.normalizeExportValues();\n    var optText = opt.decodeText();\n    var existingIdx;\n    if (useExistingOptIdx) {\n      var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        var exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n    var Opt = this.Opt();\n    Opt.push(opt);\n    return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n  };\n  PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n    var optIdx = this.addOpt(opt, useExistingOptIdx);\n    var apStateValue = PDFName.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  };\n  return PDFAcroButton;\n}(PDFAcroTerminal);\nexport default PDFAcroButton;","map":{"version":3,"mappings":"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","names":["PDFString","PDFHexString","PDFArray","PDFName","PDFAcroTerminal","IndexOutOfBoundsError","__extends","PDFAcroButton","dict","lookupMaybe","of","opt","set","context","obj","Opt","undefined","values","idx","len","size","value","lookup","push","setOpt","remove","exportValues","getExportValues","widgets","getWidgets","length","widget","exportVal","fromText","getOnValue","decodeText","useExistingOptIdx","normalizeExportValues","optText","existingIdx","optIdx","addOpt","apStateValue","String","addWidget"],"sourceRoot":"","sources":["../../../src/core/acroform/PDFAcroButton.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}