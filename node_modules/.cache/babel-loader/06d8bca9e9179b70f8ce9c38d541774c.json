{"ast":null,"code":"import _slicedToArray from \"C:/Users/sulli/Git/GeoWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nvar EMPTY_OBJECT = {};\nvar NOOP = function NOOP() {};\nvar defaultItemComparer = function defaultItemComparer(optionA, optionB) {\n  return optionA === optionB;\n};\nvar defaultIsItemDisabled = function defaultIsItemDisabled() {\n  return false;\n};\nvar defaultItemStringifier = function defaultItemStringifier(item) {\n  return typeof item === 'string' ? item : String(item);\n};\nvar defaultGetInitialState = function defaultGetInitialState() {\n  return {\n    highlightedValue: null,\n    selectedValues: []\n  };\n};\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  var _params$controlledPro = params.controlledProps,\n    controlledProps = _params$controlledPro === void 0 ? EMPTY_OBJECT : _params$controlledPro,\n    _params$disabledItems = params.disabledItemsFocusable,\n    disabledItemsFocusable = _params$disabledItems === void 0 ? false : _params$disabledItems,\n    _params$disableListWr = params.disableListWrap,\n    disableListWrap = _params$disableListWr === void 0 ? false : _params$disableListWr,\n    _params$focusManageme = params.focusManagement,\n    focusManagement = _params$focusManageme === void 0 ? 'activeDescendant' : _params$focusManageme,\n    _params$getInitialSta = params.getInitialState,\n    getInitialState = _params$getInitialSta === void 0 ? defaultGetInitialState : _params$getInitialSta,\n    getItemDomElement = params.getItemDomElement,\n    getItemId = params.getItemId,\n    _params$isItemDisable = params.isItemDisabled,\n    isItemDisabled = _params$isItemDisable === void 0 ? defaultIsItemDisabled : _params$isItemDisable,\n    externalListRef = params.rootRef,\n    _params$onStateChange = params.onStateChange,\n    onStateChange = _params$onStateChange === void 0 ? NOOP : _params$onStateChange,\n    items = params.items,\n    _params$itemComparer = params.itemComparer,\n    itemComparer = _params$itemComparer === void 0 ? defaultItemComparer : _params$itemComparer,\n    _params$itemStringifi = params.itemStringifier,\n    itemStringifier = _params$itemStringifi === void 0 ? defaultItemStringifier : _params$itemStringifi,\n    onChange = params.onChange,\n    onHighlightChange = params.onHighlightChange,\n    _params$orientation = params.orientation,\n    orientation = _params$orientation === void 0 ? 'vertical' : _params$orientation,\n    _params$pageSize = params.pageSize,\n    pageSize = _params$pageSize === void 0 ? 5 : _params$pageSize,\n    _params$reducerAction = params.reducerActionContext,\n    reducerActionContext = _params$reducerAction === void 0 ? EMPTY_OBJECT : _params$reducerAction,\n    _params$selectionMode = params.selectionMode,\n    selectionMode = _params$selectionMode === void 0 ? 'single' : _params$selectionMode,\n    externalReducer = params.stateReducer;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  var listRef = React.useRef(null);\n  var handleRef = useForkRef(externalListRef, listRef);\n  var handleHighlightChange = React.useCallback(function (event, value, reason) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  var stateComparers = React.useMemo(function () {\n    return {\n      highlightedValue: itemComparer,\n      selectedValues: function selectedValues(valuesArray1, valuesArray2) {\n        return areArraysEqual(valuesArray1, valuesArray2, itemComparer);\n      }\n    };\n  }, [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  var handleStateChange = React.useCallback(function (event, field, value, reason, state) {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  var listActionContext = React.useMemo(function () {\n    return {\n      disabledItemsFocusable: disabledItemsFocusable,\n      disableListWrap: disableListWrap,\n      focusManagement: focusManagement,\n      isItemDisabled: isItemDisabled,\n      itemComparer: itemComparer,\n      items: items,\n      itemStringifier: itemStringifier,\n      onHighlightChange: handleHighlightChange,\n      orientation: orientation,\n      pageSize: pageSize,\n      selectionMode: selectionMode,\n      stateComparers: stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, itemStringifier, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  var initialState = getInitialState();\n  var reducer = externalReducer != null ? externalReducer : defaultReducer;\n  var actionContext = React.useMemo(function () {\n    return _extends({}, reducerActionContext, listActionContext);\n  }, [reducerActionContext, listActionContext]);\n  var _useControllableReduc = useControllableReducer({\n      reducer: reducer,\n      actionContext: actionContext,\n      initialState: initialState,\n      controlledProps: controlledProps,\n      stateComparers: stateComparers,\n      onStateChange: handleStateChange\n    }),\n    _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n    state = _useControllableReduc2[0],\n    dispatch = _useControllableReduc2[1];\n  var highlightedValue = state.highlightedValue,\n    selectedValues = state.selectedValues;\n  var handleTextNavigation = useTextNavigation(function (searchString, event) {\n    return dispatch({\n      type: ListActionTypes.textNavigation,\n      event: event,\n      searchString: searchString\n    });\n  });\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  var latestSelectedValues = useLatest(selectedValues);\n  var latestHighlightedValue = useLatest(highlightedValue);\n  var previousItems = React.useRef([]);\n  React.useEffect(function () {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items: items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  var _useListChangeNotifie = useListChangeNotifiers(),\n    notifySelectionChanged = _useListChangeNotifie.notifySelectionChanged,\n    notifyHighlightChanged = _useListChangeNotifie.notifyHighlightChanged,\n    registerHighlightChangeHandler = _useListChangeNotifie.registerHighlightChangeHandler,\n    registerSelectionChangeHandler = _useListChangeNotifie.registerSelectionChangeHandler;\n  React.useEffect(function () {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(function () {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  var createHandleKeyDown = function createHandleKeyDown(other) {\n    return function (event) {\n      var _other$onKeyDown;\n      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n      if (event.defaultPrevented) {\n        return;\n      }\n      var keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n      if (orientation === 'vertical') {\n        keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n      } else {\n        keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n      }\n      if (focusManagement === 'activeDescendant') {\n        // When the child element is focused using the activeDescendant attribute,\n        // the list handles keyboard events on its behalf.\n        // We have to `preventDefault()` is this case to prevent the browser from\n        // scrolling the view when space is pressed or submitting forms when enter is pressed.\n        keysToPreventDefault.push(' ', 'Enter');\n      }\n      if (keysToPreventDefault.includes(event.key)) {\n        event.preventDefault();\n      }\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event: event\n      });\n      handleTextNavigation(event);\n    };\n  };\n  var createHandleBlur = function createHandleBlur(other) {\n    return function (event) {\n      var _other$onBlur, _listRef$current;\n      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n      if (event.defaultPrevented) {\n        return;\n      }\n      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n        // focus remains within the list\n        return;\n      }\n      dispatch({\n        type: ListActionTypes.blur,\n        event: event\n      });\n    };\n  };\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  var getItemState = React.useCallback(function (item) {\n    var _latestSelectedValues;\n    var index = items.findIndex(function (i) {\n      return itemComparer(i, item);\n    });\n    var selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(function (value) {\n      return value != null && itemComparer(item, value);\n    });\n    var disabled = isItemDisabled(item, index);\n    var highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    var focusable = focusManagement === 'DOM';\n    return {\n      disabled: disabled,\n      focusable: focusable,\n      highlighted: highlighted,\n      index: index,\n      selected: selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  var contextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: getItemState,\n      registerHighlightChangeHandler: registerHighlightChangeHandler,\n      registerSelectionChangeHandler: registerSelectionChangeHandler\n    };\n  }, [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state: state\n  });\n  return {\n    contextValue: contextValue,\n    dispatch: dispatch,\n    getRootProps: getRootProps,\n    rootRef: handleRef,\n    state: state\n  };\n}\nexport default useList;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","externalListRef","rootRef","onStateChange","items","itemComparer","itemStringifier","onChange","onHighlightChange","orientation","pageSize","reducerActionContext","selectionMode","externalReducer","stateReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"sources":["C:/Users/sulli/Git/GeoWeb/node_modules/@mui/base/useList/useList.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    itemStringifier = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      itemStringifier,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, itemStringifier, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport default useList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}