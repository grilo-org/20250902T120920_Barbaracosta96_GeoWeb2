{"ast":null,"code":"import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields } from \"./utils\";\nvar PDFAcroForm = /** @class */function () {\n  function PDFAcroForm(dict) {\n    this.dict = dict;\n  }\n  PDFAcroForm.prototype.Fields = function () {\n    var fields = this.dict.lookup(PDFName.of('Fields'));\n    if (fields instanceof PDFArray) return fields;\n    return undefined;\n  };\n  PDFAcroForm.prototype.getFields = function () {\n    var Fields = this.normalizedEntries().Fields;\n    var fields = new Array(Fields.size());\n    for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n      var ref = Fields.get(idx);\n      var dict = Fields.lookup(idx, PDFDict);\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\n    }\n    return fields;\n  };\n  PDFAcroForm.prototype.getAllFields = function () {\n    var allFields = [];\n    var pushFields = function pushFields(fields) {\n      if (!fields) return;\n      for (var idx = 0, len = fields.length; idx < len; idx++) {\n        var field = fields[idx];\n        allFields.push(field);\n        var fieldModel = field[0];\n        if (fieldModel instanceof PDFAcroNonTerminal) {\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n    pushFields(this.getFields());\n    return allFields;\n  };\n  PDFAcroForm.prototype.addField = function (field) {\n    var Fields = this.normalizedEntries().Fields;\n    Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n  };\n  PDFAcroForm.prototype.removeField = function (field) {\n    var parent = field.getParent();\n    var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n    var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n    if (fields === undefined || index === undefined) {\n      throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n    }\n    fields.remove(index);\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  };\n  PDFAcroForm.prototype.normalizedEntries = function () {\n    var Fields = this.Fields();\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName.of('Fields'), Fields);\n    }\n    return {\n      Fields: Fields\n    };\n  };\n  PDFAcroForm.fromDict = function (dict) {\n    return new PDFAcroForm(dict);\n  };\n  PDFAcroForm.create = function (context) {\n    var dict = context.obj({\n      Fields: []\n    });\n    return new PDFAcroForm(dict);\n  };\n  return PDFAcroForm;\n}();\nexport default PDFAcroForm;","map":{"version":3,"mappings":"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","names":["PDFDict","PDFArray","PDFName","PDFAcroNonTerminal","createPDFAcroField","createPDFAcroFields","dict","PDFAcroForm","fields","lookup","of","undefined","normalizedEntries","Array","Fields","size","idx","len","ref","get","allFields","pushFields","length","field","push","fieldModel","Kids","getFields","parent","getParent","index","indexOf","Error","getFullyQualifiedName","remove","removeField","context","obj","set"],"sourceRoot":"","sources":["../../../src/core/acroform/PDFAcroForm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}