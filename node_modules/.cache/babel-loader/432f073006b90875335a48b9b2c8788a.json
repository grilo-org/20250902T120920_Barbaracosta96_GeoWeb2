{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, toHexStringOfMinLength, utf16Decode, utf16Encode, pdfDocEncodingDecode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFHexString = /** @class */function (_super) {\n  __extends(PDFHexString, _super);\n  function PDFHexString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFHexString.prototype.asBytes = function () {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    var hexLength = hex.length;\n    var bytes = new Uint8Array(hex.length / 2);\n    var hexOffset = 0;\n    var bytesOffset = 0;\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n    return bytes;\n  };\n  PDFHexString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFHexString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFHexString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFHexString.prototype.clone = function () {\n    return PDFHexString.of(this.value);\n  };\n  PDFHexString.prototype.toString = function () {\n    return \"<\" + this.value + \">\";\n  };\n  PDFHexString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LessThan;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.GreaterThan;\n    return this.value.length + 2;\n  };\n  PDFHexString.of = function (value) {\n    return new PDFHexString(value);\n  };\n  PDFHexString.fromText = function (value) {\n    var encoded = utf16Encode(value);\n    var hex = '';\n    for (var idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += toHexStringOfMinLength(encoded[idx], 4);\n    }\n    return new PDFHexString(hex);\n  };\n  return PDFHexString;\n}(PDFObject);\nexport default PDFHexString;","map":{"version":3,"mappings":"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","names":["PDFObject","CharCodes","copyStringIntoBuffer","toHexStringOfMinLength","utf16Decode","utf16Encode","pdfDocEncodingDecode","parseDate","hasUtf16BOM","InvalidPDFDateStringError","__extends","value","_super","_this","PDFHexString","hex","length","hexLength","bytes","Uint8Array","hexOffset","bytesOffset","byte","parseInt","substring","asBytes","text","decodeText","date","of","buffer","offset","LessThan","GreaterThan","encoded","idx","len"],"sourceRoot":"","sources":["../../../src/core/objects/PDFHexString.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}