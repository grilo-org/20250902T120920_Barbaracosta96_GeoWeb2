{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Stream class contained in this file is a TypeScript port of the\n * JavaScript Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nvar Stream = /** @class */function () {\n  function Stream(buffer, start, length) {\n    this.bytes = buffer;\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = !!start && !!length ? start + length : this.bytes.length;\n  }\n  Object.defineProperty(Stream.prototype, \"length\", {\n    get: function () {\n      return this.end - this.start;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isEmpty\", {\n    get: function () {\n      return this.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Stream.prototype.getByte = function () {\n    if (this.pos >= this.end) {\n      return -1;\n    }\n    return this.bytes[this.pos++];\n  };\n  Stream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  };\n  Stream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  };\n  // Returns subarray of original buffer, should only be read.\n  Stream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.bytes;\n    var pos = this.pos;\n    var strEnd = this.end;\n    if (!length) {\n      var subarray = bytes.subarray(pos, strEnd);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    } else {\n      var end = pos + length;\n      if (end > strEnd) {\n        end = strEnd;\n      }\n      this.pos = end;\n      var subarray = bytes.subarray(pos, end);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n  };\n  Stream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n  Stream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n  Stream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  };\n  Stream.prototype.reset = function () {\n    this.pos = this.start;\n  };\n  Stream.prototype.moveStart = function () {\n    this.start = this.pos;\n  };\n  Stream.prototype.makeSubStream = function (start, length) {\n    return new Stream(this.bytes, start, length);\n  };\n  Stream.prototype.decode = function () {\n    return this.bytes;\n  };\n  return Stream;\n}();\nexport default Stream;","map":{"version":3,"mappings":"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","names":["buffer","start","length","bytes","pos","end","Object","Stream","b0","getByte","b1","b2","b3","forceClamped","strEnd","subarray","Uint8ClampedArray","peekedByte","getBytes","n"],"sourceRoot":"","sources":["../../../src/core/streams/Stream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}