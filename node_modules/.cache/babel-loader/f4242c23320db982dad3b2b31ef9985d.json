{"ast":null,"code":"import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) {\n  return array[array.length - 1];\n};\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexport var typedArrayFor = function (value) {\n  if (value instanceof Uint8Array) return value;\n  var length = value.length;\n  var typedArray = new Uint8Array(length);\n  for (var idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n  return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n  var arrays = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n  var arrayCount = arrays.length;\n  var typedArrays = [];\n  for (var idx = 0; idx < arrayCount; idx++) {\n    var element = arrays[idx];\n    typedArrays[idx] = element instanceof Uint8Array ? element : typedArrayFor(element);\n  }\n  var totalSize = 0;\n  for (var idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var merged = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    var arr = typedArrays[arrIdx];\n    for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n  return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n  var totalSize = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var mergedBuffer = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    var array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n  return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n  var str = '';\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    str += charFromCode(array[idx]);\n  }\n  return str;\n};\nexport var byAscendingId = function (a, b) {\n  return a.id - b.id;\n};\nexport var sortedUniq = function (array, indexer) {\n  var uniq = [];\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    var curr = array[idx];\n    var prev = array[idx - 1];\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n  return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport var reverseArray = function (array) {\n  var arrayLen = array.length;\n  for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    var leftIdx = idx;\n    var rightIdx = arrayLen - idx - 1;\n    var temp = array[idx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n  return array;\n};\nexport var sum = function (array) {\n  var total = 0;\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n  return total;\n};\nexport var range = function (start, end) {\n  var arr = new Array(end - start);\n  for (var idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n  return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n  var plucked = new Array(indices.length);\n  for (var idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n  return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n  return input instanceof Uint8Array || input instanceof ArrayBuffer || typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n  if (typeof input === 'string') {\n    return decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n  }\n};","map":{"version":3,"mappings":"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","names":["decodeFromBase64DataUri","charFromCode","last","array","length","typedArrayFor","value","Uint8Array","typedArray","idx","charCodeAt","mergeIntoTypedArray","_i","arrays","arrayCount","typedArrays","element","totalSize","merged","offset","arrIdx","arr","byteIdx","arrLen","mergeUint8Arrays","len","mergedBuffer","set","arrayAsString","str","byAscendingId","a","b","id","sortedUniq","indexer","uniq","curr","prev","push","reverseArray","arrayLen","Math","floor","leftIdx","rightIdx","temp","sum","total","range","start","end","Array","pluckIndices","indices","plucked","canBeConvertedToUint8Array","input","ArrayBuffer","toUint8Array","TypeError"],"sourceRoot":"","sources":["../../src/utils/arrays.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}